/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PayrollEmployeeAddress } from './PayrollEmployeeAddress';
import {
    PayrollEmployeeAddressFromJSON,
    PayrollEmployeeAddressFromJSONTyped,
    PayrollEmployeeAddressToJSON,
} from './PayrollEmployeeAddress';

/**
 * 
 * @export
 * @interface PayrollEmployeeRecord
 */
export interface PayrollEmployeeRecord {
    /**
     * Full name of the employee: first, middle (if stated), and last name
     * @type {string}
     * @memberof PayrollEmployeeRecord
     */
    name: string;
    /**
     * First name of employee
     * @type {string}
     * @memberof PayrollEmployeeRecord
     */
    givenName: string;
    /**
     * Middle name of employee, if stated
     * @type {string}
     * @memberof PayrollEmployeeRecord
     */
    middleName?: string;
    /**
     * Last name of employee
     * @type {string}
     * @memberof PayrollEmployeeRecord
     */
    familyName: string;
    /**
     * Array of addresses
     * @type {Array<PayrollEmployeeAddress>}
     * @memberof PayrollEmployeeRecord
     */
    address?: Array<PayrollEmployeeAddress>;
}

/**
 * Check if a given object implements the PayrollEmployeeRecord interface.
 */
export function instanceOfPayrollEmployeeRecord(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "givenName" in value;
    isInstance = isInstance && "familyName" in value;

    return isInstance;
}

export function PayrollEmployeeRecordFromJSON(json: any): PayrollEmployeeRecord {
    return PayrollEmployeeRecordFromJSONTyped(json, false);
}

export function PayrollEmployeeRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayrollEmployeeRecord {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'givenName': json['givenName'],
        'middleName': !exists(json, 'middleName') ? undefined : json['middleName'],
        'familyName': json['familyName'],
        'address': !exists(json, 'address') ? undefined : ((json['address'] as Array<any>).map(PayrollEmployeeAddressFromJSON)),
    };
}

export function PayrollEmployeeRecordToJSON(value?: PayrollEmployeeRecord | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'givenName': value.givenName,
        'middleName': value.middleName,
        'familyName': value.familyName,
        'address': value.address === undefined ? undefined : ((value.address as Array<any>).map(PayrollEmployeeAddressToJSON)),
    };
}

