/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ObbDailyBalance } from './ObbDailyBalance';
import {
    ObbDailyBalanceFromJSON,
    ObbDailyBalanceFromJSONTyped,
    ObbDailyBalanceToJSON,
} from './ObbDailyBalance';
import type { ObbDateRangeAndAmount } from './ObbDateRangeAndAmount';
import {
    ObbDateRangeAndAmountFromJSON,
    ObbDateRangeAndAmountFromJSONTyped,
    ObbDateRangeAndAmountToJSON,
} from './ObbDateRangeAndAmount';
import type { ObbDateRangeAndCount } from './ObbDateRangeAndCount';
import {
    ObbDateRangeAndCountFromJSON,
    ObbDateRangeAndCountFromJSONTyped,
    ObbDateRangeAndCountToJSON,
} from './ObbDateRangeAndCount';
import type { ObbNumWeeksAverageBalanceIncreasing } from './ObbNumWeeksAverageBalanceIncreasing';
import {
    ObbNumWeeksAverageBalanceIncreasingFromJSON,
    ObbNumWeeksAverageBalanceIncreasingFromJSONTyped,
    ObbNumWeeksAverageBalanceIncreasingToJSON,
} from './ObbNumWeeksAverageBalanceIncreasing';

/**
 * Balance analytics metrics and calculations
 * @export
 * @interface BalanceAnalyticsMetrics
 */
export interface BalanceAnalyticsMetrics {
    /**
     * Available Balance
     * @type {number}
     * @memberof BalanceAnalyticsMetrics
     */
    availableBalance?: number;
    /**
     * Available Balance date
     * @type {string}
     * @memberof BalanceAnalyticsMetrics
     */
    availableBalanceDate?: string;
    /**
     * Average daily ending balance each month over the report time period
     * @type {Array<ObbDateRangeAndAmount>}
     * @memberof BalanceAnalyticsMetrics
     */
    averageDailyBalanceByMonthForTheReportTimePeriod?: Array<ObbDateRangeAndAmount>;
    /**
     * Average Daily Balance
     * @type {number}
     * @memberof BalanceAnalyticsMetrics
     */
    averageDailyBalanceForTheReportTimePeriod?: number;
    /**
     * Average Weekday Balance
     * @type {number}
     * @memberof BalanceAnalyticsMetrics
     */
    averageWeekdayBalanceForTheReportTimePeriod?: number;
    /**
     * Number of negative daily ending balances each month over the report time period
     * @type {Array<ObbDateRangeAndCount>}
     * @memberof BalanceAnalyticsMetrics
     */
    countDailyNegativeBalancesByMonthForTheReportTimePeriod?: Array<ObbDateRangeAndCount>;
    /**
     * Current Running Balance Date
     * @type {number}
     * @memberof BalanceAnalyticsMetrics
     */
    currentRunningBalance?: number;
    /**
     * Current Running Balance date
     * @type {string}
     * @memberof BalanceAnalyticsMetrics
     */
    currentRunningBalanceDate?: string;
    /**
     * Daily balance of the account during weekdays over the length of the report
     * @type {Array<ObbDailyBalance>}
     * @memberof BalanceAnalyticsMetrics
     */
    dailyBalancesByWeekdayForTheReportTimePeriod?: Array<ObbDailyBalance>;
    /**
     * Daily balance of the account over the length of the report
     * @type {Array<ObbDailyBalance>}
     * @memberof BalanceAnalyticsMetrics
     */
    dailyBalancesForTheReportTimePeriod?: Array<ObbDailyBalance>;
    /**
     * 
     * @type {ObbNumWeeksAverageBalanceIncreasing}
     * @memberof BalanceAnalyticsMetrics
     */
    historicNumberOfWeeksAverageBalanceIncreasing?: ObbNumWeeksAverageBalanceIncreasing;
    /**
     * Maximum daily ending balance each month over the report time period
     * @type {Array<ObbDateRangeAndAmount>}
     * @memberof BalanceAnalyticsMetrics
     */
    maximumDailyBalanceByMonthForTheReportTimePeriod?: Array<ObbDateRangeAndAmount>;
    /**
     * Maximum Running Balance
     * @type {number}
     * @memberof BalanceAnalyticsMetrics
     */
    maximumRunningBalanceForTheReportTimePeriod?: number;
    /**
     * Minimum daily ending balance each month over the report time period
     * @type {Array<ObbDateRangeAndAmount>}
     * @memberof BalanceAnalyticsMetrics
     */
    minimumDailyBalanceByMonthForTheReportTimePeriod?: Array<ObbDateRangeAndAmount>;
    /**
     * Minimum Running Balance
     * @type {number}
     * @memberof BalanceAnalyticsMetrics
     */
    minimumRunningBalanceForTheReportTimePeriod?: number;
}

/**
 * Check if a given object implements the BalanceAnalyticsMetrics interface.
 */
export function instanceOfBalanceAnalyticsMetrics(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BalanceAnalyticsMetricsFromJSON(json: any): BalanceAnalyticsMetrics {
    return BalanceAnalyticsMetricsFromJSONTyped(json, false);
}

export function BalanceAnalyticsMetricsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BalanceAnalyticsMetrics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'availableBalance': !exists(json, 'availableBalance') ? undefined : json['availableBalance'],
        'availableBalanceDate': !exists(json, 'availableBalanceDate') ? undefined : json['availableBalanceDate'],
        'averageDailyBalanceByMonthForTheReportTimePeriod': !exists(json, 'averageDailyBalanceByMonthForTheReportTimePeriod') ? undefined : ((json['averageDailyBalanceByMonthForTheReportTimePeriod'] as Array<any>).map(ObbDateRangeAndAmountFromJSON)),
        'averageDailyBalanceForTheReportTimePeriod': !exists(json, 'averageDailyBalanceForTheReportTimePeriod') ? undefined : json['averageDailyBalanceForTheReportTimePeriod'],
        'averageWeekdayBalanceForTheReportTimePeriod': !exists(json, 'averageWeekdayBalanceForTheReportTimePeriod') ? undefined : json['averageWeekdayBalanceForTheReportTimePeriod'],
        'countDailyNegativeBalancesByMonthForTheReportTimePeriod': !exists(json, 'countDailyNegativeBalancesByMonthForTheReportTimePeriod') ? undefined : ((json['countDailyNegativeBalancesByMonthForTheReportTimePeriod'] as Array<any>).map(ObbDateRangeAndCountFromJSON)),
        'currentRunningBalance': !exists(json, 'currentRunningBalance') ? undefined : json['currentRunningBalance'],
        'currentRunningBalanceDate': !exists(json, 'currentRunningBalanceDate') ? undefined : json['currentRunningBalanceDate'],
        'dailyBalancesByWeekdayForTheReportTimePeriod': !exists(json, 'dailyBalancesByWeekdayForTheReportTimePeriod') ? undefined : ((json['dailyBalancesByWeekdayForTheReportTimePeriod'] as Array<any>).map(ObbDailyBalanceFromJSON)),
        'dailyBalancesForTheReportTimePeriod': !exists(json, 'dailyBalancesForTheReportTimePeriod') ? undefined : ((json['dailyBalancesForTheReportTimePeriod'] as Array<any>).map(ObbDailyBalanceFromJSON)),
        'historicNumberOfWeeksAverageBalanceIncreasing': !exists(json, 'historicNumberOfWeeksAverageBalanceIncreasing') ? undefined : ObbNumWeeksAverageBalanceIncreasingFromJSON(json['historicNumberOfWeeksAverageBalanceIncreasing']),
        'maximumDailyBalanceByMonthForTheReportTimePeriod': !exists(json, 'maximumDailyBalanceByMonthForTheReportTimePeriod') ? undefined : ((json['maximumDailyBalanceByMonthForTheReportTimePeriod'] as Array<any>).map(ObbDateRangeAndAmountFromJSON)),
        'maximumRunningBalanceForTheReportTimePeriod': !exists(json, 'maximumRunningBalanceForTheReportTimePeriod') ? undefined : json['maximumRunningBalanceForTheReportTimePeriod'],
        'minimumDailyBalanceByMonthForTheReportTimePeriod': !exists(json, 'minimumDailyBalanceByMonthForTheReportTimePeriod') ? undefined : ((json['minimumDailyBalanceByMonthForTheReportTimePeriod'] as Array<any>).map(ObbDateRangeAndAmountFromJSON)),
        'minimumRunningBalanceForTheReportTimePeriod': !exists(json, 'minimumRunningBalanceForTheReportTimePeriod') ? undefined : json['minimumRunningBalanceForTheReportTimePeriod'],
    };
}

export function BalanceAnalyticsMetricsToJSON(value?: BalanceAnalyticsMetrics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'availableBalance': value.availableBalance,
        'availableBalanceDate': value.availableBalanceDate,
        'averageDailyBalanceByMonthForTheReportTimePeriod': value.averageDailyBalanceByMonthForTheReportTimePeriod === undefined ? undefined : ((value.averageDailyBalanceByMonthForTheReportTimePeriod as Array<any>).map(ObbDateRangeAndAmountToJSON)),
        'averageDailyBalanceForTheReportTimePeriod': value.averageDailyBalanceForTheReportTimePeriod,
        'averageWeekdayBalanceForTheReportTimePeriod': value.averageWeekdayBalanceForTheReportTimePeriod,
        'countDailyNegativeBalancesByMonthForTheReportTimePeriod': value.countDailyNegativeBalancesByMonthForTheReportTimePeriod === undefined ? undefined : ((value.countDailyNegativeBalancesByMonthForTheReportTimePeriod as Array<any>).map(ObbDateRangeAndCountToJSON)),
        'currentRunningBalance': value.currentRunningBalance,
        'currentRunningBalanceDate': value.currentRunningBalanceDate,
        'dailyBalancesByWeekdayForTheReportTimePeriod': value.dailyBalancesByWeekdayForTheReportTimePeriod === undefined ? undefined : ((value.dailyBalancesByWeekdayForTheReportTimePeriod as Array<any>).map(ObbDailyBalanceToJSON)),
        'dailyBalancesForTheReportTimePeriod': value.dailyBalancesForTheReportTimePeriod === undefined ? undefined : ((value.dailyBalancesForTheReportTimePeriod as Array<any>).map(ObbDailyBalanceToJSON)),
        'historicNumberOfWeeksAverageBalanceIncreasing': ObbNumWeeksAverageBalanceIncreasingToJSON(value.historicNumberOfWeeksAverageBalanceIncreasing),
        'maximumDailyBalanceByMonthForTheReportTimePeriod': value.maximumDailyBalanceByMonthForTheReportTimePeriod === undefined ? undefined : ((value.maximumDailyBalanceByMonthForTheReportTimePeriod as Array<any>).map(ObbDateRangeAndAmountToJSON)),
        'maximumRunningBalanceForTheReportTimePeriod': value.maximumRunningBalanceForTheReportTimePeriod,
        'minimumDailyBalanceByMonthForTheReportTimePeriod': value.minimumDailyBalanceByMonthForTheReportTimePeriod === undefined ? undefined : ((value.minimumDailyBalanceByMonthForTheReportTimePeriod as Array<any>).map(ObbDateRangeAndAmountToJSON)),
        'minimumRunningBalanceForTheReportTimePeriod': value.minimumRunningBalanceForTheReportTimePeriod,
    };
}

