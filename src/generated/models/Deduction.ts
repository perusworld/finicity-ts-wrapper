/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Deduction
 */
export interface Deduction {
    /**
     * The normalized category of the deductions in the format [type][number]. The number is the will be the iterating number of the type's occurrence starting at one.
     * @type {string}
     * @memberof Deduction
     */
    name?: string;
    /**
     * The deduction line's deduction type description
     * @type {string}
     * @memberof Deduction
     */
    description?: string;
    /**
     * The amount for the deduction line deducted from employee's pay for the specified pay period
     * @type {number}
     * @memberof Deduction
     */
    amountCurrent?: number;
    /**
     * The amount for the deduction line being deducted from the employee's pay for the current pay year
     * @type {number}
     * @memberof Deduction
     */
    amountYTD?: number;
    /**
     * Categorization based on the deduction line's description
     * @type {string}
     * @memberof Deduction
     */
    type?: string;
}

/**
 * Check if a given object implements the Deduction interface.
 */
export function instanceOfDeduction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DeductionFromJSON(json: any): Deduction {
    return DeductionFromJSONTyped(json, false);
}

export function DeductionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Deduction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'amountCurrent': !exists(json, 'amountCurrent') ? undefined : json['amountCurrent'],
        'amountYTD': !exists(json, 'amountYTD') ? undefined : json['amountYTD'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function DeductionToJSON(value?: Deduction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'amountCurrent': value.amountCurrent,
        'amountYTD': value.amountYTD,
        'type': value.type,
    };
}

