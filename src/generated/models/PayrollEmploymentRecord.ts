/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PayrollEmployerAddress } from './PayrollEmployerAddress';
import {
    PayrollEmployerAddressFromJSON,
    PayrollEmployerAddressFromJSONTyped,
    PayrollEmployerAddressToJSON,
} from './PayrollEmployerAddress';

/**
 * 
 * @export
 * @interface PayrollEmploymentRecord
 */
export interface PayrollEmploymentRecord {
    /**
     * Name of the employer as stated by the employer in the payroll system
     * @type {string}
     * @memberof PayrollEmploymentRecord
     */
    employerName: string;
    /**
     * Employer identification number (EIN)
     * @type {string}
     * @memberof PayrollEmploymentRecord
     */
    legalEntityId?: string;
    /**
     * The original hired date of an employee at the company
     * @type {number}
     * @memberof PayrollEmploymentRecord
     */
    originalHireDate?: number;
    /**
     * If an employee leaves the company and returns later, then the employer states the latest hire date at the company
     * @type {number}
     * @memberof PayrollEmploymentRecord
     */
    latestHireDate?: number;
    /**
     * The most recent pay date from an employer
     * @type {number}
     * @memberof PayrollEmploymentRecord
     */
    latestPayDate?: number;
    /**
     * The number of days since an employee was last paid
     * @type {number}
     * @memberof PayrollEmploymentRecord
     */
    daysSinceLastPay?: number;
    /**
     * The number of pay cadences an employee has not been paid; determined by the pay frequency
     * @type {number}
     * @memberof PayrollEmploymentRecord
     */
    numberPayCadenceWithoutPay?: number;
    /**
     * The date an employee ended their employment at the company
     * @type {number}
     * @memberof PayrollEmploymentRecord
     */
    employmentEndDate?: number;
    /**
     * The length of time an employee has been employed with that employer in ISO 8601 format (eg P1Y6M0D)
     * @type {string}
     * @memberof PayrollEmploymentRecord
     */
    employmentDuration?: string;
    /**
     * Array of addresses
     * @type {Array<PayrollEmployerAddress>}
     * @memberof PayrollEmploymentRecord
     */
    employerAddress?: Array<PayrollEmployerAddress>;
    /**
     * 'Status codes: `A` - Active, `NLE` - No Longer Employed, `L` - Leave, `O` - Other'
     * @type {string}
     * @memberof PayrollEmploymentRecord
     */
    employmentStatusCode: string;
    /**
     * 'Status name: `Active`, `No Longer Employed`, `Leave` or `Other`'
     * @type {string}
     * @memberof PayrollEmploymentRecord
     */
    employmentStatusName: string;
    /**
     * The abbreviate code for the employment level names (workLevelName) that we receive from the employer
     * @type {string}
     * @memberof PayrollEmploymentRecord
     */
    workLevelCode?: string;
    /**
     * The employment level name is whatever we receive from the employer, such as full time, part time, temp, contractor, and more
     * @type {string}
     * @memberof PayrollEmploymentRecord
     */
    workLevelName?: string;
    /**
     * The categorized work level status. Enumerations are:
     * 
     * * `Temporary`
     * 
     * * `Seasonal`
     * 
     * * `Retired`
     * 
     * * `Student`
     * 
     * * `Full Time`
     * 
     * * `Part Time`
     * 
     * * `Unspecified`
     * 
     * This is a new field, currently enabled only for testing reports. It will be added for all reports in August 2021.
     * 
     * @type {string}
     * @memberof PayrollEmploymentRecord
     */
    workLevelStatus: string;
    /**
     * Employee job title
     * @type {string}
     * @memberof PayrollEmploymentRecord
     */
    positionTitle?: string;
    /**
     * The length of time an employee has been employed at their current or latest position for this employment in ISO 8601 format (eg P1Y6M0D)
     * @type {string}
     * @memberof PayrollEmploymentRecord
     */
    positionDuration?: string;
}

/**
 * Check if a given object implements the PayrollEmploymentRecord interface.
 */
export function instanceOfPayrollEmploymentRecord(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "employerName" in value;
    isInstance = isInstance && "employmentStatusCode" in value;
    isInstance = isInstance && "employmentStatusName" in value;
    isInstance = isInstance && "workLevelStatus" in value;

    return isInstance;
}

export function PayrollEmploymentRecordFromJSON(json: any): PayrollEmploymentRecord {
    return PayrollEmploymentRecordFromJSONTyped(json, false);
}

export function PayrollEmploymentRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayrollEmploymentRecord {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'employerName': json['employerName'],
        'legalEntityId': !exists(json, 'legalEntityId') ? undefined : json['legalEntityId'],
        'originalHireDate': !exists(json, 'originalHireDate') ? undefined : json['originalHireDate'],
        'latestHireDate': !exists(json, 'latestHireDate') ? undefined : json['latestHireDate'],
        'latestPayDate': !exists(json, 'latestPayDate') ? undefined : json['latestPayDate'],
        'daysSinceLastPay': !exists(json, 'daysSinceLastPay') ? undefined : json['daysSinceLastPay'],
        'numberPayCadenceWithoutPay': !exists(json, 'numberPayCadenceWithoutPay') ? undefined : json['numberPayCadenceWithoutPay'],
        'employmentEndDate': !exists(json, 'employmentEndDate') ? undefined : json['employmentEndDate'],
        'employmentDuration': !exists(json, 'employmentDuration') ? undefined : json['employmentDuration'],
        'employerAddress': !exists(json, 'employerAddress') ? undefined : ((json['employerAddress'] as Array<any>).map(PayrollEmployerAddressFromJSON)),
        'employmentStatusCode': json['employmentStatusCode'],
        'employmentStatusName': json['employmentStatusName'],
        'workLevelCode': !exists(json, 'workLevelCode') ? undefined : json['workLevelCode'],
        'workLevelName': !exists(json, 'workLevelName') ? undefined : json['workLevelName'],
        'workLevelStatus': json['workLevelStatus'],
        'positionTitle': !exists(json, 'positionTitle') ? undefined : json['positionTitle'],
        'positionDuration': !exists(json, 'positionDuration') ? undefined : json['positionDuration'],
    };
}

export function PayrollEmploymentRecordToJSON(value?: PayrollEmploymentRecord | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'employerName': value.employerName,
        'legalEntityId': value.legalEntityId,
        'originalHireDate': value.originalHireDate,
        'latestHireDate': value.latestHireDate,
        'latestPayDate': value.latestPayDate,
        'daysSinceLastPay': value.daysSinceLastPay,
        'numberPayCadenceWithoutPay': value.numberPayCadenceWithoutPay,
        'employmentEndDate': value.employmentEndDate,
        'employmentDuration': value.employmentDuration,
        'employerAddress': value.employerAddress === undefined ? undefined : ((value.employerAddress as Array<any>).map(PayrollEmployerAddressToJSON)),
        'employmentStatusCode': value.employmentStatusCode,
        'employmentStatusName': value.employmentStatusName,
        'workLevelCode': value.workLevelCode,
        'workLevelName': value.workLevelName,
        'workLevelStatus': value.workLevelStatus,
        'positionTitle': value.positionTitle,
        'positionDuration': value.positionDuration,
    };
}

