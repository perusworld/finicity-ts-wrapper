/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A finicity customer record with application info
 * @export
 * @interface CustomerWithAppData
 */
export interface CustomerWithAppData {
    /**
     * A customer ID. See Add Customer API for how to create a customer ID.
     * @type {string}
     * @memberof CustomerWithAppData
     */
    id: string;
    /**
     * The customer's username, assigned by the partner (a unique identifier), following these rules: minimum 6 characters maximum 255 characters any mix of uppercase, lowercase, numeric, and non-alphabet special characters ! @ . # $ % & * _ - + the use of email in this field is discouraged it is recommended to use a unique non-email identifier. Use of special characters may result in an error (e.g. Ã­, Ã¼, etc.). Usernames are unique. A username used in Test Drive can't be reused in other plans.
     * @type {string}
     * @memberof CustomerWithAppData
     */
    username: string;
    /**
     * The first name of the account holder
     * @type {string}
     * @memberof CustomerWithAppData
     */
    firstName: string;
    /**
     * The last name of the account holder
     * @type {string}
     * @memberof CustomerWithAppData
     */
    lastName: string;
    /**
     * The type of customer ("active" or "testing" or "" for all types)
     * @type {string}
     * @memberof CustomerWithAppData
     */
    type: string;
    /**
     * A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {string}
     * @memberof CustomerWithAppData
     */
    createdDate: string;
    /**
     * A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {string}
     * @memberof CustomerWithAppData
     */
    lastModifiedDate?: string;
    /**
     * `applicationId` value returned from the Get App Registration Status API and the partner assign the customers to. This cannot be changed once set. Only applicable in cases of partners with multiple registered applications. If the partner only has one app, this can usually be omitted. This field is populated after the app is in a status approved.
     * @type {string}
     * @memberof CustomerWithAppData
     */
    applicationId: string;
    /**
     * The name of the application assigned to the customer
     * @type {string}
     * @memberof CustomerWithAppData
     */
    applicationName: string;
}

/**
 * Check if a given object implements the CustomerWithAppData interface.
 */
export function instanceOfCustomerWithAppData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "lastName" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "createdDate" in value;
    isInstance = isInstance && "applicationId" in value;
    isInstance = isInstance && "applicationName" in value;

    return isInstance;
}

export function CustomerWithAppDataFromJSON(json: any): CustomerWithAppData {
    return CustomerWithAppDataFromJSONTyped(json, false);
}

export function CustomerWithAppDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerWithAppData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'username': json['username'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'type': json['type'],
        'createdDate': json['createdDate'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : json['lastModifiedDate'],
        'applicationId': json['applicationId'],
        'applicationName': json['applicationName'],
    };
}

export function CustomerWithAppDataToJSON(value?: CustomerWithAppData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'username': value.username,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'type': value.type,
        'createdDate': value.createdDate,
        'lastModifiedDate': value.lastModifiedDate,
        'applicationId': value.applicationId,
        'applicationName': value.applicationName,
    };
}

