/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Birthday } from './Birthday';
import {
    BirthdayFromJSON,
    BirthdayFromJSONTyped,
    BirthdayToJSON,
} from './Birthday';

/**
 * A finicity consumer record
 * @export
 * @interface Consumer
 */
export interface Consumer {
    /**
     * A consumer ID. See Create Consumer API for how to create a consumer ID.
     * @type {string}
     * @memberof Consumer
     */
    id: string;
    /**
     * The first name of the account holder
     * @type {string}
     * @memberof Consumer
     */
    firstName: string;
    /**
     * The last name of the account holder
     * @type {string}
     * @memberof Consumer
     */
    lastName: string;
    /**
     * A customer ID represented as a number. See Add Customer API for how to create a customer ID.
     * @type {number}
     * @memberof Consumer
     */
    customerId: number;
    /**
     * A street address
     * @type {string}
     * @memberof Consumer
     */
    address: string;
    /**
     * City
     * @type {string}
     * @memberof Consumer
     */
    city: string;
    /**
     * State
     * @type {string}
     * @memberof Consumer
     */
    state: string;
    /**
     * A ZIP code
     * @type {string}
     * @memberof Consumer
     */
    zip: string;
    /**
     * A phone number (max length 15).
     * @type {string}
     * @memberof Consumer
     */
    phone: string;
    /**
     * Last 4 digits of a SSN
     * @type {string}
     * @memberof Consumer
     */
    ssn: string;
    /**
     * 
     * @type {Birthday}
     * @memberof Consumer
     */
    birthday: Birthday;
    /**
     * An email address
     * @type {string}
     * @memberof Consumer
     */
    email: string;
    /**
     * A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof Consumer
     */
    createdDate: number;
    /**
     * A generational or academic suffix
     * @type {string}
     * @memberof Consumer
     */
    suffix?: string;
}

/**
 * Check if a given object implements the Consumer interface.
 */
export function instanceOfConsumer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "lastName" in value;
    isInstance = isInstance && "customerId" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "zip" in value;
    isInstance = isInstance && "phone" in value;
    isInstance = isInstance && "ssn" in value;
    isInstance = isInstance && "birthday" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "createdDate" in value;

    return isInstance;
}

export function ConsumerFromJSON(json: any): Consumer {
    return ConsumerFromJSONTyped(json, false);
}

export function ConsumerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Consumer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'customerId': json['customerId'],
        'address': json['address'],
        'city': json['city'],
        'state': json['state'],
        'zip': json['zip'],
        'phone': json['phone'],
        'ssn': json['ssn'],
        'birthday': BirthdayFromJSON(json['birthday']),
        'email': json['email'],
        'createdDate': json['createdDate'],
        'suffix': !exists(json, 'suffix') ? undefined : json['suffix'],
    };
}

export function ConsumerToJSON(value?: Consumer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'customerId': value.customerId,
        'address': value.address,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'phone': value.phone,
        'ssn': value.ssn,
        'birthday': BirthdayToJSON(value.birthday),
        'email': value.email,
        'createdDate': value.createdDate,
        'suffix': value.suffix,
    };
}

