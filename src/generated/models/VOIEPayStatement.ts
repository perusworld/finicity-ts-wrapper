/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Deduction } from './Deduction';
import {
    DeductionFromJSON,
    DeductionFromJSONTyped,
    DeductionToJSON,
} from './Deduction';
import type { DirectDeposit } from './DirectDeposit';
import {
    DirectDepositFromJSON,
    DirectDepositFromJSONTyped,
    DirectDepositToJSON,
} from './DirectDeposit';
import type { Employee } from './Employee';
import {
    EmployeeFromJSON,
    EmployeeFromJSONTyped,
    EmployeeToJSON,
} from './Employee';
import type { Employer } from './Employer';
import {
    EmployerFromJSON,
    EmployerFromJSONTyped,
    EmployerToJSON,
} from './Employer';
import type { PayStat } from './PayStat';
import {
    PayStatFromJSON,
    PayStatFromJSONTyped,
    PayStatToJSON,
} from './PayStat';

/**
 * 
 * @export
 * @interface VOIEPayStatement
 */
export interface VOIEPayStatement {
    /**
     * The pay period of the pay statement
     * @type {string}
     * @memberof VOIEPayStatement
     */
    payPeriod?: string;
    /**
     * Designates whether the pay statement is billable
     * @type {boolean}
     * @memberof VOIEPayStatement
     */
    billable?: boolean;
    /**
     * The asset ID of the stored pay statement
     * @type {string}
     * @memberof VOIEPayStatement
     */
    assetId?: string;
    /**
     * The listed pay date for the pay statement
     * @type {number}
     * @memberof VOIEPayStatement
     */
    payDate?: number;
    /**
     * The beginning of the pay period
     * @type {number}
     * @memberof VOIEPayStatement
     */
    startDate?: number;
    /**
     * The end of the pay period
     * @type {number}
     * @memberof VOIEPayStatement
     */
    endDate?: number;
    /**
     * The total pay after deductions for the employee for the current pay period
     * @type {number}
     * @memberof VOIEPayStatement
     */
    netPayCurrent?: number;
    /**
     * The total accumulation of pay after deductions for the employee for the current pay year
     * @type {number}
     * @memberof VOIEPayStatement
     */
    netPayYTD?: number;
    /**
     * The total pay before deductions for the employee for the current pay period
     * @type {number}
     * @memberof VOIEPayStatement
     */
    grossPayCurrent?: number;
    /**
     * The total accumulation of pay before deductions for the employee for the current pay year
     * @type {number}
     * @memberof VOIEPayStatement
     */
    grossPayYTD?: number;
    /**
     * The company that provides the pay stub.
     * @type {string}
     * @memberof VOIEPayStatement
     */
    payrollProvider?: string;
    /**
     * 
     * @type {Employer}
     * @memberof VOIEPayStatement
     */
    employer?: Employer;
    /**
     * 
     * @type {Employee}
     * @memberof VOIEPayStatement
     */
    employee?: Employee;
    /**
     * Information pertaining to the earnings on the pay statement
     * @type {Array<PayStat>}
     * @memberof VOIEPayStatement
     */
    payStat?: Array<PayStat>;
    /**
     * Information pertaining to deductions on the pay statement
     * @type {Array<Deduction>}
     * @memberof VOIEPayStatement
     */
    deductions?: Array<Deduction>;
    /**
     * Information pertaining to direct deposits on the pay statement
     * @type {Array<DirectDeposit>}
     * @memberof VOIEPayStatement
     */
    directDeposits?: Array<DirectDeposit>;
}

/**
 * Check if a given object implements the VOIEPayStatement interface.
 */
export function instanceOfVOIEPayStatement(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VOIEPayStatementFromJSON(json: any): VOIEPayStatement {
    return VOIEPayStatementFromJSONTyped(json, false);
}

export function VOIEPayStatementFromJSONTyped(json: any, ignoreDiscriminator: boolean): VOIEPayStatement {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'payPeriod': !exists(json, 'payPeriod') ? undefined : json['payPeriod'],
        'billable': !exists(json, 'billable') ? undefined : json['billable'],
        'assetId': !exists(json, 'assetId') ? undefined : json['assetId'],
        'payDate': !exists(json, 'payDate') ? undefined : json['payDate'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'netPayCurrent': !exists(json, 'netPayCurrent') ? undefined : json['netPayCurrent'],
        'netPayYTD': !exists(json, 'netPayYTD') ? undefined : json['netPayYTD'],
        'grossPayCurrent': !exists(json, 'grossPayCurrent') ? undefined : json['grossPayCurrent'],
        'grossPayYTD': !exists(json, 'grossPayYTD') ? undefined : json['grossPayYTD'],
        'payrollProvider': !exists(json, 'payrollProvider') ? undefined : json['payrollProvider'],
        'employer': !exists(json, 'employer') ? undefined : EmployerFromJSON(json['employer']),
        'employee': !exists(json, 'employee') ? undefined : EmployeeFromJSON(json['employee']),
        'payStat': !exists(json, 'payStat') ? undefined : ((json['payStat'] as Array<any>).map(PayStatFromJSON)),
        'deductions': !exists(json, 'deductions') ? undefined : ((json['deductions'] as Array<any>).map(DeductionFromJSON)),
        'directDeposits': !exists(json, 'directDeposits') ? undefined : ((json['directDeposits'] as Array<any>).map(DirectDepositFromJSON)),
    };
}

export function VOIEPayStatementToJSON(value?: VOIEPayStatement | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'payPeriod': value.payPeriod,
        'billable': value.billable,
        'assetId': value.assetId,
        'payDate': value.payDate,
        'startDate': value.startDate,
        'endDate': value.endDate,
        'netPayCurrent': value.netPayCurrent,
        'netPayYTD': value.netPayYTD,
        'grossPayCurrent': value.grossPayCurrent,
        'grossPayYTD': value.grossPayYTD,
        'payrollProvider': value.payrollProvider,
        'employer': EmployerToJSON(value.employer),
        'employee': EmployeeToJSON(value.employee),
        'payStat': value.payStat === undefined ? undefined : ((value.payStat as Array<any>).map(PayStatToJSON)),
        'deductions': value.deductions === undefined ? undefined : ((value.deductions as Array<any>).map(DeductionToJSON)),
        'directDeposits': value.directDeposits === undefined ? undefined : ((value.directDeposits as Array<any>).map(DirectDepositToJSON)),
    };
}

