/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Loan details
 * @export
 * @interface LoanPaymentDetailsLoan
 */
export interface LoanPaymentDetailsLoan {
    /**
     * An account ID
     * @type {string}
     * @memberof LoanPaymentDetailsLoan
     */
    accountId: string;
    /**
     * Institution's ID of the Student Loan
     * @type {string}
     * @memberof LoanPaymentDetailsLoan
     */
    loanNumber: string;
    /**
     * The payment number given by the institution. This number is typically for manual payments. This is not an ACH payment number.
     * @type {string}
     * @memberof LoanPaymentDetailsLoan
     */
    loanPaymentNumber: string;
    /**
     * The payment address to which send manual payments should be sent
     * @type {string}
     * @memberof LoanPaymentDetailsLoan
     */
    loanPaymentAddress: string;
    /**
     * The payoff amount for the loan
     * @type {number}
     * @memberof LoanPaymentDetailsLoan
     */
    loanFuturePayoffAmount?: number;
    /**
     * The date to which the "Future Payoff Amount" applies
     * @type {Date}
     * @memberof LoanPaymentDetailsLoan
     */
    loanFuturePayoffDate?: Date;
}

/**
 * Check if a given object implements the LoanPaymentDetailsLoan interface.
 */
export function instanceOfLoanPaymentDetailsLoan(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accountId" in value;
    isInstance = isInstance && "loanNumber" in value;
    isInstance = isInstance && "loanPaymentNumber" in value;
    isInstance = isInstance && "loanPaymentAddress" in value;

    return isInstance;
}

export function LoanPaymentDetailsLoanFromJSON(json: any): LoanPaymentDetailsLoan {
    return LoanPaymentDetailsLoanFromJSONTyped(json, false);
}

export function LoanPaymentDetailsLoanFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoanPaymentDetailsLoan {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountId': json['accountId'],
        'loanNumber': json['loanNumber'],
        'loanPaymentNumber': json['loanPaymentNumber'],
        'loanPaymentAddress': json['loanPaymentAddress'],
        'loanFuturePayoffAmount': !exists(json, 'loanFuturePayoffAmount') ? undefined : json['loanFuturePayoffAmount'],
        'loanFuturePayoffDate': !exists(json, 'loanFuturePayoffDate') ? undefined : (new Date(json['loanFuturePayoffDate'])),
    };
}

export function LoanPaymentDetailsLoanToJSON(value?: LoanPaymentDetailsLoan | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accountId': value.accountId,
        'loanNumber': value.loanNumber,
        'loanPaymentNumber': value.loanPaymentNumber,
        'loanPaymentAddress': value.loanPaymentAddress,
        'loanFuturePayoffAmount': value.loanFuturePayoffAmount,
        'loanFuturePayoffDate': value.loanFuturePayoffDate === undefined ? undefined : (value.loanFuturePayoffDate.toISOString()),
    };
}

