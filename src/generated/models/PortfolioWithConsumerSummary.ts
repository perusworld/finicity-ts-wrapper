/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PortfolioConsumer } from './PortfolioConsumer';
import {
    PortfolioConsumerFromJSON,
    PortfolioConsumerFromJSONTyped,
    PortfolioConsumerToJSON,
} from './PortfolioConsumer';
import type { PortfolioReport } from './PortfolioReport';
import {
    PortfolioReportFromJSON,
    PortfolioReportFromJSONTyped,
    PortfolioReportToJSON,
} from './PortfolioReport';

/**
 * 
 * @export
 * @interface PortfolioWithConsumerSummary
 */
export interface PortfolioWithConsumerSummary {
    /**
     * A unique identifier that will be consistent across all reports created for the same customer
     * @type {string}
     * @memberof PortfolioWithConsumerSummary
     */
    portfolioId: string;
    /**
     * A list of reports in the portfolio
     * @type {Array<PortfolioReport>}
     * @memberof PortfolioWithConsumerSummary
     */
    reports: Array<PortfolioReport>;
    /**
     * 
     * @type {PortfolioConsumer}
     * @memberof PortfolioWithConsumerSummary
     */
    consumer: PortfolioConsumer;
}

/**
 * Check if a given object implements the PortfolioWithConsumerSummary interface.
 */
export function instanceOfPortfolioWithConsumerSummary(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "portfolioId" in value;
    isInstance = isInstance && "reports" in value;
    isInstance = isInstance && "consumer" in value;

    return isInstance;
}

export function PortfolioWithConsumerSummaryFromJSON(json: any): PortfolioWithConsumerSummary {
    return PortfolioWithConsumerSummaryFromJSONTyped(json, false);
}

export function PortfolioWithConsumerSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): PortfolioWithConsumerSummary {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'portfolioId': json['portfolioId'],
        'reports': ((json['reports'] as Array<any>).map(PortfolioReportFromJSON)),
        'consumer': PortfolioConsumerFromJSON(json['consumer']),
    };
}

export function PortfolioWithConsumerSummaryToJSON(value?: PortfolioWithConsumerSummary | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'portfolioId': value.portfolioId,
        'reports': ((value.reports as Array<any>).map(PortfolioReportToJSON)),
        'consumer': PortfolioConsumerToJSON(value.consumer),
    };
}

