/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A new customer that was just enrolled
 * @export
 * @interface CreatedCustomer
 */
export interface CreatedCustomer {
    /**
     * A customer ID. See Add Customer API for how to create a customer ID.
     * @type {string}
     * @memberof CreatedCustomer
     */
    id: string;
    /**
     * The customer's username, assigned by the partner (a unique identifier), following these rules: minimum 6 characters maximum 255 characters any mix of uppercase, lowercase, numeric, and non-alphabet special characters ! @ . # $ % & * _ - + the use of email in this field is discouraged it is recommended to use a unique non-email identifier. Use of special characters may result in an error (e.g. Ã­, Ã¼, etc.). Usernames are unique. A username used in Test Drive can't be reused in other plans.
     * @type {string}
     * @memberof CreatedCustomer
     */
    username: string;
    /**
     * A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof CreatedCustomer
     */
    createdDate: number;
}

/**
 * Check if a given object implements the CreatedCustomer interface.
 */
export function instanceOfCreatedCustomer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "createdDate" in value;

    return isInstance;
}

export function CreatedCustomerFromJSON(json: any): CreatedCustomer {
    return CreatedCustomerFromJSONTyped(json, false);
}

export function CreatedCustomerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreatedCustomer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'username': json['username'],
        'createdDate': json['createdDate'],
    };
}

export function CreatedCustomerToJSON(value?: CreatedCustomer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'username': value.username,
        'createdDate': value.createdDate,
    };
}

