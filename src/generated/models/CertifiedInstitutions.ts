/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertifiedInstitution } from './CertifiedInstitution';
import {
    CertifiedInstitutionFromJSON,
    CertifiedInstitutionFromJSONTyped,
    CertifiedInstitutionToJSON,
} from './CertifiedInstitution';

/**
 * A list of financial institutions from the Get Certified Institutions API
 * @export
 * @interface CertifiedInstitutions
 */
export interface CertifiedInstitutions {
    /**
     * The total number of results matching search criteria
     * @type {number}
     * @memberof CertifiedInstitutions
     */
    found: number;
    /**
     * The number of results returned
     * @type {number}
     * @memberof CertifiedInstitutions
     */
    displaying: number;
    /**
     * If the value of `moreAvailable` is "true", you can retrieve the next page of results by increasing the value of the start parameter in your next request:"...&start=6&limit=5"
     * @type {boolean}
     * @memberof CertifiedInstitutions
     */
    moreAvailable: boolean;
    /**
     * A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof CertifiedInstitutions
     */
    requestedDate: number;
    /**
     * A list of institutions
     * @type {Array<CertifiedInstitution>}
     * @memberof CertifiedInstitutions
     */
    institutions: Array<CertifiedInstitution>;
}

/**
 * Check if a given object implements the CertifiedInstitutions interface.
 */
export function instanceOfCertifiedInstitutions(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "found" in value;
    isInstance = isInstance && "displaying" in value;
    isInstance = isInstance && "moreAvailable" in value;
    isInstance = isInstance && "requestedDate" in value;
    isInstance = isInstance && "institutions" in value;

    return isInstance;
}

export function CertifiedInstitutionsFromJSON(json: any): CertifiedInstitutions {
    return CertifiedInstitutionsFromJSONTyped(json, false);
}

export function CertifiedInstitutionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertifiedInstitutions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'found': json['found'],
        'displaying': json['displaying'],
        'moreAvailable': json['moreAvailable'],
        'requestedDate': json['requestedDate'],
        'institutions': ((json['institutions'] as Array<any>).map(CertifiedInstitutionFromJSON)),
    };
}

export function CertifiedInstitutionsToJSON(value?: CertifiedInstitutions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'found': value.found,
        'displaying': value.displaying,
        'moreAvailable': value.moreAvailable,
        'requestedDate': value.requestedDate,
        'institutions': ((value.institutions as Array<any>).map(CertifiedInstitutionToJSON)),
    };
}

