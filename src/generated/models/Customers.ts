/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Customer } from './Customer';
import {
    CustomerFromJSON,
    CustomerFromJSONTyped,
    CustomerToJSON,
} from './Customer';

/**
 * A list of customers
 * @export
 * @interface Customers
 */
export interface Customers {
    /**
     * The total number of results matching search criteria
     * @type {number}
     * @memberof Customers
     */
    found?: number;
    /**
     * The number of results returned
     * @type {number}
     * @memberof Customers
     */
    displaying: number;
    /**
     * If the value of `moreAvailable` is "true", you can retrieve the next page of results by increasing the value of the start parameter in your next request:"...&start=6&limit=5"
     * @type {boolean}
     * @memberof Customers
     */
    moreAvailable: boolean;
    /**
     * A list of customer records
     * @type {Array<Customer>}
     * @memberof Customers
     */
    customers: Array<Customer>;
}

/**
 * Check if a given object implements the Customers interface.
 */
export function instanceOfCustomers(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "displaying" in value;
    isInstance = isInstance && "moreAvailable" in value;
    isInstance = isInstance && "customers" in value;

    return isInstance;
}

export function CustomersFromJSON(json: any): Customers {
    return CustomersFromJSONTyped(json, false);
}

export function CustomersFromJSONTyped(json: any, ignoreDiscriminator: boolean): Customers {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'found': !exists(json, 'found') ? undefined : json['found'],
        'displaying': json['displaying'],
        'moreAvailable': json['moreAvailable'],
        'customers': ((json['customers'] as Array<any>).map(CustomerFromJSON)),
    };
}

export function CustomersToJSON(value?: Customers | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'found': value.found,
        'displaying': value.displaying,
        'moreAvailable': value.moreAvailable,
        'customers': ((value.customers as Array<any>).map(CustomerToJSON)),
    };
}

