/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ErrorMessage
 */
export interface ErrorMessage {
    /**
     * An error code (can be returned as a number or a string). Useful links: [Common API Status Codes](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/#common-api-status-codes), [Aggregation Status Codes](https://developer.mastercard.com/open-banking-us/documentation/products/manage/account-aggregation/#aggregation-status-codes).
     * @type {object}
     * @memberof ErrorMessage
     */
    code: object;
    /**
     * A status code
     * @type {string}
     * @memberof ErrorMessage
     */
    status?: string;
    /**
     * A title for the error
     * @type {string}
     * @memberof ErrorMessage
     */
    title?: string;
    /**
     * An error level
     * @type {string}
     * @memberof ErrorMessage
     */
    level?: string;
    /**
     * An error message
     * @type {string}
     * @memberof ErrorMessage
     */
    message?: string;
    /**
     * Some more details about the error
     * @type {string}
     * @memberof ErrorMessage
     */
    userMessage?: string;
    /**
     * An asset ID. Generated by Connect or by using the Store Customer Pay Statement API.
     * @type {string}
     * @memberof ErrorMessage
     */
    assetId?: string;
    /**
     * An account ID
     * @type {string}
     * @memberof ErrorMessage
     */
    accountId?: string;
}

/**
 * Check if a given object implements the ErrorMessage interface.
 */
export function instanceOfErrorMessage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "code" in value;

    return isInstance;
}

export function ErrorMessageFromJSON(json: any): ErrorMessage {
    return ErrorMessageFromJSONTyped(json, false);
}

export function ErrorMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorMessage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': json['code'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'level': !exists(json, 'level') ? undefined : json['level'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'userMessage': !exists(json, 'user_message') ? undefined : json['user_message'],
        'assetId': !exists(json, 'assetId') ? undefined : json['assetId'],
        'accountId': !exists(json, 'accountId') ? undefined : json['accountId'],
    };
}

export function ErrorMessageToJSON(value?: ErrorMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'status': value.status,
        'title': value.title,
        'level': value.level,
        'message': value.message,
        'user_message': value.userMessage,
        'assetId': value.assetId,
        'accountId': value.accountId,
    };
}

