/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Consumer phone
 * @export
 * @interface AccountOwnerPhone
 */
export interface AccountOwnerPhone {
    /**
     * The account owner's phone type:   
     * 
     * * "HOME"
     * 
     * * "BUSINESS"
     * 
     * * "CELL"
     * 
     * * "FAX"
     * @type {string}
     * @memberof AccountOwnerPhone
     */
    type?: string;
    /**
     * Country calling code of the phone number as defined by ITU-T E.123 and E.164 international standards (max length 3)".
     * @type {string}
     * @memberof AccountOwnerPhone
     */
    country?: string;
    /**
     * A phone number (max length 15).
     * @type {string}
     * @memberof AccountOwnerPhone
     */
    phone?: string;
}

/**
 * Check if a given object implements the AccountOwnerPhone interface.
 */
export function instanceOfAccountOwnerPhone(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AccountOwnerPhoneFromJSON(json: any): AccountOwnerPhone {
    return AccountOwnerPhoneFromJSONTyped(json, false);
}

export function AccountOwnerPhoneFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountOwnerPhone {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
    };
}

export function AccountOwnerPhoneToJSON(value?: AccountOwnerPhone | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'country': value.country,
        'phone': value.phone,
    };
}

