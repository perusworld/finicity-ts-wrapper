/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountDetailsTxBased } from './AccountDetailsTxBased';
import {
    AccountDetailsTxBasedFromJSON,
    AccountDetailsTxBasedFromJSONTyped,
    AccountDetailsTxBasedToJSON,
} from './AccountDetailsTxBased';
import type { CashFlowCashFlowBalance } from './CashFlowCashFlowBalance';
import {
    CashFlowCashFlowBalanceFromJSON,
    CashFlowCashFlowBalanceFromJSONTyped,
    CashFlowCashFlowBalanceToJSON,
} from './CashFlowCashFlowBalance';
import type { CashFlowCashFlowCharacteristic } from './CashFlowCashFlowCharacteristic';
import {
    CashFlowCashFlowCharacteristicFromJSON,
    CashFlowCashFlowCharacteristicFromJSONTyped,
    CashFlowCashFlowCharacteristicToJSON,
} from './CashFlowCashFlowCharacteristic';
import type { CashFlowCashFlowCredit } from './CashFlowCashFlowCredit';
import {
    CashFlowCashFlowCreditFromJSON,
    CashFlowCashFlowCreditFromJSONTyped,
    CashFlowCashFlowCreditToJSON,
} from './CashFlowCashFlowCredit';
import type { CashFlowCashFlowDebit } from './CashFlowCashFlowDebit';
import {
    CashFlowCashFlowDebitFromJSON,
    CashFlowCashFlowDebitFromJSONTyped,
    CashFlowCashFlowDebitToJSON,
} from './CashFlowCashFlowDebit';
import type { PrequalificationReportAssetSummary } from './PrequalificationReportAssetSummary';
import {
    PrequalificationReportAssetSummaryFromJSON,
    PrequalificationReportAssetSummaryFromJSONTyped,
    PrequalificationReportAssetSummaryToJSON,
} from './PrequalificationReportAssetSummary';
import type { ReportAccountPosition } from './ReportAccountPosition';
import {
    ReportAccountPositionFromJSON,
    ReportAccountPositionFromJSONTyped,
    ReportAccountPositionToJSON,
} from './ReportAccountPosition';
import type { ReportTransaction } from './ReportTransaction';
import {
    ReportTransactionFromJSON,
    ReportTransactionFromJSONTyped,
    ReportTransactionToJSON,
} from './ReportTransaction';
import type { ReportTransactionNewTxBased } from './ReportTransactionNewTxBased';
import {
    ReportTransactionNewTxBasedFromJSON,
    ReportTransactionNewTxBasedFromJSONTyped,
    ReportTransactionNewTxBasedToJSON,
} from './ReportTransactionNewTxBased';
import type { VOIETXVerifyReportIncomeStream } from './VOIETXVerifyReportIncomeStream';
import {
    VOIETXVerifyReportIncomeStreamFromJSON,
    VOIETXVerifyReportIncomeStreamFromJSONTyped,
    VOIETXVerifyReportIncomeStreamToJSON,
} from './VOIETXVerifyReportIncomeStream';

/**
 * An account record
 * @export
 * @interface ReportInstitutionAccount
 */
export interface ReportInstitutionAccount {
    /**
     * The ID of the account
     * @type {number}
     * @memberof ReportInstitutionAccount
     */
    id: number;
    /**
     * The name(s) of the account owner(s). This field is optional. If no owner information is available, this field will not appear in the report.
     * @type {string}
     * @memberof ReportInstitutionAccount
     */
    ownerName?: string;
    /**
     * The mailing address of the account owner(s). This field is optional. If no owner information is available, this field will not appear in the report.
     * @type {string}
     * @memberof ReportInstitutionAccount
     */
    ownerAddress?: string;
    /**
     * The account name from the institution
     * @type {string}
     * @memberof ReportInstitutionAccount
     */
    name: string;
    /**
     * The account number from the institution (all digits except the last four are obfuscated)
     * @type {string}
     * @memberof ReportInstitutionAccount
     */
    number: string;
    /**
     * One of the values from account types
     * @type {string}
     * @memberof ReportInstitutionAccount
     */
    type: string;
    /**
     * The status of the most recent aggregation attempt
     * @type {number}
     * @memberof ReportInstitutionAccount
     */
    aggregationStatusCode: number;
    /**
     * Current balance of the account
     * @type {number}
     * @memberof ReportInstitutionAccount
     */
    currentBalance?: number;
    /**
     * The available balance for the account
     * @type {number}
     * @memberof ReportInstitutionAccount
     */
    availableBalance?: number;
    /**
     * A timestamp showing when the balance was captured
     * @type {number}
     * @memberof ReportInstitutionAccount
     */
    balanceDate?: number;
    /**
     * a list of transaction records
     * @type {Array<ReportTransactionNewTxBased>}
     * @memberof ReportInstitutionAccount
     */
    transactions: Array<ReportTransactionNewTxBased>;
    /**
     * 
     * @type {CashFlowCashFlowBalance}
     * @memberof ReportInstitutionAccount
     */
    cashFlowBalance?: CashFlowCashFlowBalance;
    /**
     * 
     * @type {CashFlowCashFlowCredit}
     * @memberof ReportInstitutionAccount
     */
    cashFlowCredit?: CashFlowCashFlowCredit;
    /**
     * 
     * @type {CashFlowCashFlowDebit}
     * @memberof ReportInstitutionAccount
     */
    cashFlowDebit?: CashFlowCashFlowDebit;
    /**
     * 
     * @type {CashFlowCashFlowCharacteristic}
     * @memberof ReportInstitutionAccount
     */
    cashFlowCharacteristic?: CashFlowCashFlowCharacteristic;
    /**
     * The cleared balance of the account as-of `balanceDate`
     * @type {number}
     * @memberof ReportInstitutionAccount
     */
    balance?: number;
    /**
     * The average monthly balance of this account
     * @type {number}
     * @memberof ReportInstitutionAccount
     */
    averageMonthlyBalance?: number;
    /**
     * The count for the total number of insufficient funds transactions, based on the `fromDate` of the report.
     * @type {number}
     * @memberof ReportInstitutionAccount
     */
    totNumberInsufficientFundsFeeDebitTxAccount?: number;
    /**
     * The total number of  insufficient funds fees for the account over six months
     * @type {number}
     * @memberof ReportInstitutionAccount
     */
    totNumberInsufficientFundsFeeDebitTxOver6MonthsAccount?: number;
    /**
     * The number of days since the most recent insufficient funds transaction, based on the `fromDate` of the report.
     * @type {number}
     * @memberof ReportInstitutionAccount
     */
    totNumberDaysSinceMostRecentInsufficientFundsFeeDebitTxAccount?: number;
    /**
     * 
     * @type {PrequalificationReportAssetSummary}
     * @memberof ReportInstitutionAccount
     */
    asset?: PrequalificationReportAssetSummary;
    /**
     * 
     * @type {AccountDetailsTxBased}
     * @memberof ReportInstitutionAccount
     */
    details?: AccountDetailsTxBased;
    /**
     * The count for the total number of insufficient funds transactions for the last two months, based on the `fromDate` of the report.
     * @type {number}
     * @memberof ReportInstitutionAccount
     */
    totNumberInsufficientFundsFeeDebitTxOver2MonthsAccount?: number;
    /**
     * 
     * @type {ReportAccountPosition}
     * @memberof ReportInstitutionAccount
     */
    position?: ReportAccountPosition;
    /**
     * A list of income stream records
     * @type {Array<VOIETXVerifyReportIncomeStream>}
     * @memberof ReportInstitutionAccount
     */
    incomeStreams?: Array<VOIETXVerifyReportIncomeStream>;
    /**
     * Beginning balance of account per the time period in the report
     * @type {number}
     * @memberof ReportInstitutionAccount
     */
    beginningBalance?: number;
    /**
     * A list of miscellaneous deposits
     * @type {Array<ReportTransaction>}
     * @memberof ReportInstitutionAccount
     */
    miscDeposits?: Array<ReportTransaction>;
}

/**
 * Check if a given object implements the ReportInstitutionAccount interface.
 */
export function instanceOfReportInstitutionAccount(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "number" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "aggregationStatusCode" in value;
    isInstance = isInstance && "transactions" in value;

    return isInstance;
}

export function ReportInstitutionAccountFromJSON(json: any): ReportInstitutionAccount {
    return ReportInstitutionAccountFromJSONTyped(json, false);
}

export function ReportInstitutionAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportInstitutionAccount {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'ownerName': !exists(json, 'ownerName') ? undefined : json['ownerName'],
        'ownerAddress': !exists(json, 'ownerAddress') ? undefined : json['ownerAddress'],
        'name': json['name'],
        'number': json['number'],
        'type': json['type'],
        'aggregationStatusCode': json['aggregationStatusCode'],
        'currentBalance': !exists(json, 'currentBalance') ? undefined : json['currentBalance'],
        'availableBalance': !exists(json, 'availableBalance') ? undefined : json['availableBalance'],
        'balanceDate': !exists(json, 'balanceDate') ? undefined : json['balanceDate'],
        'transactions': ((json['transactions'] as Array<any>).map(ReportTransactionNewTxBasedFromJSON)),
        'cashFlowBalance': !exists(json, 'cashFlowBalance') ? undefined : CashFlowCashFlowBalanceFromJSON(json['cashFlowBalance']),
        'cashFlowCredit': !exists(json, 'cashFlowCredit') ? undefined : CashFlowCashFlowCreditFromJSON(json['cashFlowCredit']),
        'cashFlowDebit': !exists(json, 'cashFlowDebit') ? undefined : CashFlowCashFlowDebitFromJSON(json['cashFlowDebit']),
        'cashFlowCharacteristic': !exists(json, 'cashFlowCharacteristic') ? undefined : CashFlowCashFlowCharacteristicFromJSON(json['cashFlowCharacteristic']),
        'balance': !exists(json, 'balance') ? undefined : json['balance'],
        'averageMonthlyBalance': !exists(json, 'averageMonthlyBalance') ? undefined : json['averageMonthlyBalance'],
        'totNumberInsufficientFundsFeeDebitTxAccount': !exists(json, 'totNumberInsufficientFundsFeeDebitTxAccount') ? undefined : json['totNumberInsufficientFundsFeeDebitTxAccount'],
        'totNumberInsufficientFundsFeeDebitTxOver6MonthsAccount': !exists(json, 'totNumberInsufficientFundsFeeDebitTxOver6MonthsAccount') ? undefined : json['totNumberInsufficientFundsFeeDebitTxOver6MonthsAccount'],
        'totNumberDaysSinceMostRecentInsufficientFundsFeeDebitTxAccount': !exists(json, 'totNumberDaysSinceMostRecentInsufficientFundsFeeDebitTxAccount') ? undefined : json['totNumberDaysSinceMostRecentInsufficientFundsFeeDebitTxAccount'],
        'asset': !exists(json, 'asset') ? undefined : PrequalificationReportAssetSummaryFromJSON(json['asset']),
        'details': !exists(json, 'details') ? undefined : AccountDetailsTxBasedFromJSON(json['details']),
        'totNumberInsufficientFundsFeeDebitTxOver2MonthsAccount': !exists(json, 'totNumberInsufficientFundsFeeDebitTxOver2MonthsAccount') ? undefined : json['totNumberInsufficientFundsFeeDebitTxOver2MonthsAccount'],
        'position': !exists(json, 'position') ? undefined : ReportAccountPositionFromJSON(json['position']),
        'incomeStreams': !exists(json, 'incomeStreams') ? undefined : ((json['incomeStreams'] as Array<any>).map(VOIETXVerifyReportIncomeStreamFromJSON)),
        'beginningBalance': !exists(json, 'beginningBalance') ? undefined : json['beginningBalance'],
        'miscDeposits': !exists(json, 'miscDeposits') ? undefined : ((json['miscDeposits'] as Array<any>).map(ReportTransactionFromJSON)),
    };
}

export function ReportInstitutionAccountToJSON(value?: ReportInstitutionAccount | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'ownerName': value.ownerName,
        'ownerAddress': value.ownerAddress,
        'name': value.name,
        'number': value.number,
        'type': value.type,
        'aggregationStatusCode': value.aggregationStatusCode,
        'currentBalance': value.currentBalance,
        'availableBalance': value.availableBalance,
        'balanceDate': value.balanceDate,
        'transactions': ((value.transactions as Array<any>).map(ReportTransactionNewTxBasedToJSON)),
        'cashFlowBalance': CashFlowCashFlowBalanceToJSON(value.cashFlowBalance),
        'cashFlowCredit': CashFlowCashFlowCreditToJSON(value.cashFlowCredit),
        'cashFlowDebit': CashFlowCashFlowDebitToJSON(value.cashFlowDebit),
        'cashFlowCharacteristic': CashFlowCashFlowCharacteristicToJSON(value.cashFlowCharacteristic),
        'balance': value.balance,
        'averageMonthlyBalance': value.averageMonthlyBalance,
        'totNumberInsufficientFundsFeeDebitTxAccount': value.totNumberInsufficientFundsFeeDebitTxAccount,
        'totNumberInsufficientFundsFeeDebitTxOver6MonthsAccount': value.totNumberInsufficientFundsFeeDebitTxOver6MonthsAccount,
        'totNumberDaysSinceMostRecentInsufficientFundsFeeDebitTxAccount': value.totNumberDaysSinceMostRecentInsufficientFundsFeeDebitTxAccount,
        'asset': PrequalificationReportAssetSummaryToJSON(value.asset),
        'details': AccountDetailsTxBasedToJSON(value.details),
        'totNumberInsufficientFundsFeeDebitTxOver2MonthsAccount': value.totNumberInsufficientFundsFeeDebitTxOver2MonthsAccount,
        'position': ReportAccountPositionToJSON(value.position),
        'incomeStreams': value.incomeStreams === undefined ? undefined : ((value.incomeStreams as Array<any>).map(VOIETXVerifyReportIncomeStreamToJSON)),
        'beginningBalance': value.beginningBalance,
        'miscDeposits': value.miscDeposits === undefined ? undefined : ((value.miscDeposits as Array<any>).map(ReportTransactionToJSON)),
    };
}

