/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Configuration for the Connect email's sent to customers
 * @export
 * @interface EmailOptions
 */
export interface EmailOptions {
    /**
     * The email address for the customer receiving the Connect email
     * @type {string}
     * @memberof EmailOptions
     */
    to: string;
    /**
     * The name of a person or business sending the Connect email
     * @type {string}
     * @memberof EmailOptions
     */
    from?: string;
    /**
     * The support phone number listed in the email
     * @type {string}
     * @memberof EmailOptions
     */
    supportPhone?: string;
    /**
     * The subject line of the email. The default is "Verify your Financial Information".
     * @type {string}
     * @memberof EmailOptions
     */
    subject?: string;
    /**
     * The first name of the customer or both names of the customers for joint borrowers. Example: "Marvin and Jenny".
     * @type {string}
     * @memberof EmailOptions
     */
    firstName?: string;
    /**
     * The name of your company
     * @type {string}
     * @memberof EmailOptions
     */
    institutionName?: string;
    /**
     * The institution address to appear in the footer of the email
     * @type {string}
     * @memberof EmailOptions
     */
    institutionAddress?: string;
    /**
     * A signature for the email
     * @type {Array<string>}
     * @memberof EmailOptions
     */
    signature?: Array<string>;
}

/**
 * Check if a given object implements the EmailOptions interface.
 */
export function instanceOfEmailOptions(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "to" in value;

    return isInstance;
}

export function EmailOptionsFromJSON(json: any): EmailOptions {
    return EmailOptionsFromJSONTyped(json, false);
}

export function EmailOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'to': json['to'],
        'from': !exists(json, 'from') ? undefined : json['from'],
        'supportPhone': !exists(json, 'supportPhone') ? undefined : json['supportPhone'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'institutionName': !exists(json, 'institutionName') ? undefined : json['institutionName'],
        'institutionAddress': !exists(json, 'institutionAddress') ? undefined : json['institutionAddress'],
        'signature': !exists(json, 'signature') ? undefined : json['signature'],
    };
}

export function EmailOptionsToJSON(value?: EmailOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'to': value.to,
        'from': value.from,
        'supportPhone': value.supportPhone,
        'subject': value.subject,
        'firstName': value.firstName,
        'institutionName': value.institutionName,
        'institutionAddress': value.institutionAddress,
        'signature': value.signature,
    };
}

