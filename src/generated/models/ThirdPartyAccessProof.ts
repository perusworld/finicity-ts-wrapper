/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * An object representing a digital signature of the access key
 * @export
 * @interface ThirdPartyAccessProof
 */
export interface ThirdPartyAccessProof {
    /**
     * The digital signature for the "receipt" portion of the access key
     * @type {string}
     * @memberof ThirdPartyAccessProof
     */
    signature?: string;
    /**
     * The Finicity key identifier is used to sign the access key
     * @type {string}
     * @memberof ThirdPartyAccessProof
     */
    keyId?: string;
    /**
     * A date-time with time zone
     * @type {Date}
     * @memberof ThirdPartyAccessProof
     */
    timestamp?: Date;
}

/**
 * Check if a given object implements the ThirdPartyAccessProof interface.
 */
export function instanceOfThirdPartyAccessProof(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ThirdPartyAccessProofFromJSON(json: any): ThirdPartyAccessProof {
    return ThirdPartyAccessProofFromJSONTyped(json, false);
}

export function ThirdPartyAccessProofFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThirdPartyAccessProof {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'signature': !exists(json, 'signature') ? undefined : json['signature'],
        'keyId': !exists(json, 'keyId') ? undefined : json['keyId'],
        'timestamp': !exists(json, 'timestamp') ? undefined : (new Date(json['timestamp'])),
    };
}

export function ThirdPartyAccessProofToJSON(value?: ThirdPartyAccessProof | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'signature': value.signature,
        'keyId': value.keyId,
        'timestamp': value.timestamp === undefined ? undefined : (value.timestamp.toISOString()),
    };
}

