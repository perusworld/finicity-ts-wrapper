/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Institution } from './Institution';
import {
    InstitutionFromJSON,
    InstitutionFromJSONTyped,
    InstitutionToJSON,
} from './Institution';

/**
 * A list of financial institutions from the Get Institutions API
 * @export
 * @interface Institutions
 */
export interface Institutions {
    /**
     * The total number of results matching search criteria
     * @type {number}
     * @memberof Institutions
     */
    found: number;
    /**
     * The number of results returned
     * @type {number}
     * @memberof Institutions
     */
    displaying: number;
    /**
     * If the value of `moreAvailable` is "true", you can retrieve the next page of results by increasing the value of the start parameter in your next request:"...&start=6&limit=5"
     * @type {boolean}
     * @memberof Institutions
     */
    moreAvailable: boolean;
    /**
     * A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof Institutions
     */
    createdDate: number;
    /**
     * A list of institutions
     * @type {Array<Institution>}
     * @memberof Institutions
     */
    institutions: Array<Institution>;
}

/**
 * Check if a given object implements the Institutions interface.
 */
export function instanceOfInstitutions(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "found" in value;
    isInstance = isInstance && "displaying" in value;
    isInstance = isInstance && "moreAvailable" in value;
    isInstance = isInstance && "createdDate" in value;
    isInstance = isInstance && "institutions" in value;

    return isInstance;
}

export function InstitutionsFromJSON(json: any): Institutions {
    return InstitutionsFromJSONTyped(json, false);
}

export function InstitutionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Institutions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'found': json['found'],
        'displaying': json['displaying'],
        'moreAvailable': json['moreAvailable'],
        'createdDate': json['createdDate'],
        'institutions': ((json['institutions'] as Array<any>).map(InstitutionFromJSON)),
    };
}

export function InstitutionsToJSON(value?: Institutions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'found': value.found,
        'displaying': value.displaying,
        'moreAvailable': value.moreAvailable,
        'createdDate': value.createdDate,
        'institutions': ((value.institutions as Array<any>).map(InstitutionToJSON)),
    };
}

