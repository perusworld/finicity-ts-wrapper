/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomerAccountDetail } from './CustomerAccountDetail';
import {
    CustomerAccountDetailFromJSON,
    CustomerAccountDetailFromJSONTyped,
    CustomerAccountDetailToJSON,
} from './CustomerAccountDetail';
import type { CustomerAccountPosition } from './CustomerAccountPosition';
import {
    CustomerAccountPositionFromJSON,
    CustomerAccountPositionFromJSONTyped,
    CustomerAccountPositionToJSON,
} from './CustomerAccountPosition';

/**
 * An account represents a bank account such as a checking or savings that the customer has added via the Connect interface.
 * @export
 * @interface CustomerAccount
 */
export interface CustomerAccount {
    /**
     * An account ID
     * @type {string}
     * @memberof CustomerAccount
     */
    id: string;
    /**
     * The account number from the institution
     * @type {string}
     * @memberof CustomerAccount
     * @deprecated
     */
    number: string;
    /**
     * The account number from a financial institution in truncated format:
     * 
     *   * Last four digits: "1234"
     * 
     *   * Last four digits with suffix: "1234-9"
     * 
     *   * Full value for string accounts: "john@gmail.com"
     * example: '1234-9'
     * @type {string}
     * @memberof CustomerAccount
     */
    accountNumberDisplay: string;
    /**
     * The last 4 digits of the ACH account number
     * @type {string}
     * @memberof CustomerAccount
     */
    realAccountNumberLast4?: string;
    /**
     * The account name from the institution
     * @type {string}
     * @memberof CustomerAccount
     */
    name: string;
    /**
     * The cleared balance of the account as of `balanceDate`
     * @type {number}
     * @memberof CustomerAccount
     */
    balance?: number;
    /**
     * The list of supported account types.
     * * "checking": Standard checking
     * * "savings": Standard savings
     * * "cd": Certificates of deposit
     * * "moneyMarket": Money Market
     * * "creditCard": Standard credit cards
     * * "lineOfCredit": Home equity, line of credit
     * * "investment": Generic investment (no details)
     * * "investmentTaxDeferred": Generic tax-advantaged investment (no details)
     * * "employeeStockPurchasePlan": ESPP, Employee Stock Ownership Plans (ESOP), Stock Purchase Plans
     * * "ira": Individual Retirement Account (not Rollover or Roth)
     * * "401k": 401K Plan
     * * "roth": Roth IRA, Roth 401K
     * * "403b": 403B Plan
     * * "529plan": 529 Plan (True value is 529)
     * * "rollover": Rollover IRA
     * * "ugma": Uniform Gifts to Minors Act
     * * "utma": Uniform Transfers to Minors Act
     * * "keogh": Keogh Plan
     * * "457plan": 457 Plan (True value is 457)
     * * "401a": 401A Plan
     * * "brokerageAccount": Brokerage Account
     * * "educationSavings": Education Savings Account that is not a 529
     * * "healthSavingsAccount": HSA (Health Savings Accounts)
     * * "pension": Pension
     * * "profitSharingPlan": Profit Sharing Plan
     * * "roth401k": Roth 401K
     * * "sepIRA": Simplified Employee Pension IRA
     * * "simpleIRA": Simple IRA
     * * "thriftSavingsPlan": Thrift Savings Plan
     * * "variableAnnuity": Variable Annuity
     * * "cryptocurrency": Cryptocurrency Wallet, Cryptocurrency Account
     * * "mortgage": Standard Mortgages
     * * "loan": Auto loans, equity loans, other loans
     * * "studentLoan": Student Loan
     * * "studentLoanGroup": Student Loan Group
     * * "studentLoanAccount": Student Loan Account
     * @type {string}
     * @memberof CustomerAccount
     */
    type: string;
    /**
     * The status of the most recent aggregation attempt (see [Aggregation Status Codes](https://developer.mastercard.com/open-banking-us/documentation/products/manage/account-aggregation/#aggregation-status-codes)). Won't be present until you have run your first aggregation for the account.
     * @type {number}
     * @memberof CustomerAccount
     */
    aggregationStatusCode?: number;
    /**
     * "pending" during account discovery, always "active" following
     *   successful account activation
     * @type {string}
     * @memberof CustomerAccount
     */
    status: string;
    /**
     * A customer ID. See Add Customer API for how to create a customer ID.
     * @type {string}
     * @memberof CustomerAccount
     */
    customerId: string;
    /**
     * The ID of a financial institution
     * @type {string}
     * @memberof CustomerAccount
     */
    institutionId: string;
    /**
     * A timestamp showing when the balance was captured. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof CustomerAccount
     */
    balanceDate?: number;
    /**
     * A timestamp showing the last successful aggregation of the account. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof CustomerAccount
     */
    aggregationSuccessDate?: number;
    /**
     * A timestamp showing the last aggregation attempt, whether successful or not. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof CustomerAccount
     */
    aggregationAttemptDate?: number;
    /**
     * A timestamp showing when the account was added to the system. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof CustomerAccount
     */
    createdDate: number;
    /**
     * A timestamp showing when the account was last modified to the system. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof CustomerAccount
     */
    lastUpdatedDate?: number;
    /**
     * The market segment of the account. Possible values: personal, business
     * @type {string}
     * @memberof CustomerAccount
     */
    marketSegment?: string;
    /**
     * A currency code
     * @type {string}
     * @memberof CustomerAccount
     */
    currency: string;
    /**
     * The date of the latest transaction on the account. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof CustomerAccount
     */
    lastTransactionDate?: number;
    /**
     * The date of the oldest transaction in the transactions for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof CustomerAccount
     */
    oldestTransactionDate?: number;
    /**
     * An institution login ID (from the account record), represented as a number
     * @type {number}
     * @memberof CustomerAccount
     */
    institutionLoginId: number;
    /**
     * 
     * @type {CustomerAccountDetail}
     * @memberof CustomerAccount
     */
    detail?: CustomerAccountDetail;
    /**
     * Investment holdings
     * @type {Array<CustomerAccountPosition>}
     * @memberof CustomerAccount
     */
    position?: Array<CustomerAccountPosition>;
    /**
     * Display position of the account at the financial institution, "1"
     *     being the top listed account
     * @type {number}
     * @memberof CustomerAccount
     */
    displayPosition?: number;
    /**
     * The assigned account ID for the account one level higher in the student loan account hierarchy
     * @type {string}
     * @memberof CustomerAccount
     */
    parentAccount?: string;
}

/**
 * Check if a given object implements the CustomerAccount interface.
 */
export function instanceOfCustomerAccount(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "number" in value;
    isInstance = isInstance && "accountNumberDisplay" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "customerId" in value;
    isInstance = isInstance && "institutionId" in value;
    isInstance = isInstance && "createdDate" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "institutionLoginId" in value;

    return isInstance;
}

export function CustomerAccountFromJSON(json: any): CustomerAccount {
    return CustomerAccountFromJSONTyped(json, false);
}

export function CustomerAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerAccount {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'number': json['number'],
        'accountNumberDisplay': json['accountNumberDisplay'],
        'realAccountNumberLast4': !exists(json, 'realAccountNumberLast4') ? undefined : json['realAccountNumberLast4'],
        'name': json['name'],
        'balance': !exists(json, 'balance') ? undefined : json['balance'],
        'type': json['type'],
        'aggregationStatusCode': !exists(json, 'aggregationStatusCode') ? undefined : json['aggregationStatusCode'],
        'status': json['status'],
        'customerId': json['customerId'],
        'institutionId': json['institutionId'],
        'balanceDate': !exists(json, 'balanceDate') ? undefined : json['balanceDate'],
        'aggregationSuccessDate': !exists(json, 'aggregationSuccessDate') ? undefined : json['aggregationSuccessDate'],
        'aggregationAttemptDate': !exists(json, 'aggregationAttemptDate') ? undefined : json['aggregationAttemptDate'],
        'createdDate': json['createdDate'],
        'lastUpdatedDate': !exists(json, 'lastUpdatedDate') ? undefined : json['lastUpdatedDate'],
        'marketSegment': !exists(json, 'marketSegment') ? undefined : json['marketSegment'],
        'currency': json['currency'],
        'lastTransactionDate': !exists(json, 'lastTransactionDate') ? undefined : json['lastTransactionDate'],
        'oldestTransactionDate': !exists(json, 'oldestTransactionDate') ? undefined : json['oldestTransactionDate'],
        'institutionLoginId': json['institutionLoginId'],
        'detail': !exists(json, 'detail') ? undefined : CustomerAccountDetailFromJSON(json['detail']),
        'position': !exists(json, 'position') ? undefined : ((json['position'] as Array<any>).map(CustomerAccountPositionFromJSON)),
        'displayPosition': !exists(json, 'displayPosition') ? undefined : json['displayPosition'],
        'parentAccount': !exists(json, 'parentAccount') ? undefined : json['parentAccount'],
    };
}

export function CustomerAccountToJSON(value?: CustomerAccount | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'number': value.number,
        'accountNumberDisplay': value.accountNumberDisplay,
        'realAccountNumberLast4': value.realAccountNumberLast4,
        'name': value.name,
        'balance': value.balance,
        'type': value.type,
        'aggregationStatusCode': value.aggregationStatusCode,
        'status': value.status,
        'customerId': value.customerId,
        'institutionId': value.institutionId,
        'balanceDate': value.balanceDate,
        'aggregationSuccessDate': value.aggregationSuccessDate,
        'aggregationAttemptDate': value.aggregationAttemptDate,
        'createdDate': value.createdDate,
        'lastUpdatedDate': value.lastUpdatedDate,
        'marketSegment': value.marketSegment,
        'currency': value.currency,
        'lastTransactionDate': value.lastTransactionDate,
        'oldestTransactionDate': value.oldestTransactionDate,
        'institutionLoginId': value.institutionLoginId,
        'detail': CustomerAccountDetailToJSON(value.detail),
        'position': value.position === undefined ? undefined : ((value.position as Array<any>).map(CustomerAccountPositionToJSON)),
        'displayPosition': value.displayPosition,
        'parentAccount': value.parentAccount,
    };
}

