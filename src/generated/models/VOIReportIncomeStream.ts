/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CadenceDetails } from './CadenceDetails';
import {
    CadenceDetailsFromJSON,
    CadenceDetailsFromJSONTyped,
    CadenceDetailsToJSON,
} from './CadenceDetails';
import type { NetMonthly } from './NetMonthly';
import {
    NetMonthlyFromJSON,
    NetMonthlyFromJSONTyped,
    NetMonthlyToJSON,
} from './NetMonthly';
import type { ReportTransaction } from './ReportTransaction';
import {
    ReportTransactionFromJSON,
    ReportTransactionFromJSONTyped,
    ReportTransactionToJSON,
} from './ReportTransaction';

/**
 * 
 * @export
 * @interface VOIReportIncomeStream
 */
export interface VOIReportIncomeStream {
    /**
     * Income stream ID
     * @type {string}
     * @memberof VOIReportIncomeStream
     */
    id: string;
    /**
     * A human-readable name based on the `normalizedPayee` name of the transactions for this income stream
     * @type {string}
     * @memberof VOIReportIncomeStream
     */
    name: string;
    /**
     * Possible values: "ACTIVE", "INACTIVE"
     * @type {string}
     * @memberof VOIReportIncomeStream
     */
    status: string;
    /**
     * Possible values: "HIGH", "MODERATE", "LOW", "NO"
     * @type {string}
     * @memberof VOIReportIncomeStream
     */
    estimateInclusion: string;
    /**
     * Level of confidence that the deposit stream represents income (example: 85%)
     * @type {number}
     * @memberof VOIReportIncomeStream
     */
    confidence: number;
    /**
     * 
     * @type {CadenceDetails}
     * @memberof VOIReportIncomeStream
     */
    cadence: CadenceDetails;
    /**
     * A list of net monthly records. One instance for each complete calendar month in the report.
     * @type {Array<NetMonthly>}
     * @memberof VOIReportIncomeStream
     */
    netMonthly?: Array<NetMonthly>;
    /**
     * Sum of all values in `netMonthlyIncome` over the previous 12 months
     * @type {number}
     * @memberof VOIReportIncomeStream
     */
    netAnnual?: number;
    /**
     * Projected net income over the next 12 months, across all income streams, based on `netAnnualIncome`
     * @type {number}
     * @memberof VOIReportIncomeStream
     */
    projectedNetAnnual?: number;
    /**
     * Before-tax gross annual income (estimated from `netAnnual`) across all income stream in the past 12 months
     * @type {number}
     * @memberof VOIReportIncomeStream
     */
    estimatedGrossAnnual?: number;
    /**
     * Projected gross income over the next 12 months, across all active income streams, based on `projectedNetAnnual`
     * @type {number}
     * @memberof VOIReportIncomeStream
     */
    projectedGrossAnnual?: number;
    /**
     * Monthly average amount over the previous 24 months
     * @type {number}
     * @memberof VOIReportIncomeStream
     */
    averageMonthlyIncomeNet?: number;
    /**
     * The number of months the income transactions are observed
     * @type {number}
     * @memberof VOIReportIncomeStream
     */
    incomeStreamMonths?: number;
    /**
     * A list of transaction records
     * @type {Array<ReportTransaction>}
     * @memberof VOIReportIncomeStream
     */
    transactions: Array<ReportTransaction>;
}

/**
 * Check if a given object implements the VOIReportIncomeStream interface.
 */
export function instanceOfVOIReportIncomeStream(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "estimateInclusion" in value;
    isInstance = isInstance && "confidence" in value;
    isInstance = isInstance && "cadence" in value;
    isInstance = isInstance && "transactions" in value;

    return isInstance;
}

export function VOIReportIncomeStreamFromJSON(json: any): VOIReportIncomeStream {
    return VOIReportIncomeStreamFromJSONTyped(json, false);
}

export function VOIReportIncomeStreamFromJSONTyped(json: any, ignoreDiscriminator: boolean): VOIReportIncomeStream {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'status': json['status'],
        'estimateInclusion': json['estimateInclusion'],
        'confidence': json['confidence'],
        'cadence': CadenceDetailsFromJSON(json['cadence']),
        'netMonthly': !exists(json, 'netMonthly') ? undefined : ((json['netMonthly'] as Array<any>).map(NetMonthlyFromJSON)),
        'netAnnual': !exists(json, 'netAnnual') ? undefined : json['netAnnual'],
        'projectedNetAnnual': !exists(json, 'projectedNetAnnual') ? undefined : json['projectedNetAnnual'],
        'estimatedGrossAnnual': !exists(json, 'estimatedGrossAnnual') ? undefined : json['estimatedGrossAnnual'],
        'projectedGrossAnnual': !exists(json, 'projectedGrossAnnual') ? undefined : json['projectedGrossAnnual'],
        'averageMonthlyIncomeNet': !exists(json, 'averageMonthlyIncomeNet') ? undefined : json['averageMonthlyIncomeNet'],
        'incomeStreamMonths': !exists(json, 'incomeStreamMonths') ? undefined : json['incomeStreamMonths'],
        'transactions': ((json['transactions'] as Array<any>).map(ReportTransactionFromJSON)),
    };
}

export function VOIReportIncomeStreamToJSON(value?: VOIReportIncomeStream | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'status': value.status,
        'estimateInclusion': value.estimateInclusion,
        'confidence': value.confidence,
        'cadence': CadenceDetailsToJSON(value.cadence),
        'netMonthly': value.netMonthly === undefined ? undefined : ((value.netMonthly as Array<any>).map(NetMonthlyToJSON)),
        'netAnnual': value.netAnnual,
        'projectedNetAnnual': value.projectedNetAnnual,
        'estimatedGrossAnnual': value.estimatedGrossAnnual,
        'projectedGrossAnnual': value.projectedGrossAnnual,
        'averageMonthlyIncomeNet': value.averageMonthlyIncomeNet,
        'incomeStreamMonths': value.incomeStreamMonths,
        'transactions': ((value.transactions as Array<any>).map(ReportTransactionToJSON)),
    };
}

