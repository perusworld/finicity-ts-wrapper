/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AppFinancialInstitutionStatus } from './AppFinancialInstitutionStatus';
import {
    AppFinancialInstitutionStatusFromJSON,
    AppFinancialInstitutionStatusFromJSONTyped,
    AppFinancialInstitutionStatusToJSON,
} from './AppFinancialInstitutionStatus';

/**
 * Registration status details for the application
 * @export
 * @interface AppStatus
 */
export interface AppStatus {
    /**
     * Your Partner ID displayed in the [Developer Dashboard](https://developer.mastercard.com/account/log-in)
     * @type {string}
     * @memberof AppStatus
     */
    partnerId: string;
    /**
     * Identifier to track the application registration from the App Registration and Get App Registration Status APIs
     * @type {string}
     * @memberof AppStatus
     */
    preAppId: string;
    /**
     * A note on the registration. Typically used to indicate reasons for rejected apps.
     * @type {string}
     * @memberof AppStatus
     */
    note?: string;
    /**
     * `applicationId` value returned from the Get App Registration Status API and the partner assign the customers to. This cannot be changed once set. Only applicable in cases of partners with multiple registered applications. If the partner only has one app, this can usually be omitted. This field is populated after the app is in a status approved.
     * @type {string}
     * @memberof AppStatus
     */
    applicationId?: string;
    /**
     * The name of the application assigned to the customer
     * @type {string}
     * @memberof AppStatus
     */
    appName: string;
    /**
     * A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof AppStatus
     */
    submittedDate: number;
    /**
     * A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof AppStatus
     */
    modifiedDate: number;
    /**
     * The status of an app registration request. "A" means approved. "P" means pending which is the status when initially submitted or when the app is modified and awaiting approval. "R" means rejected. If it is rejected there will be a note with the rejected reason.
     * @type {string}
     * @memberof AppStatus
     */
    status: string;
    /**
     * Indicates scopes of data accessible to the app
     * @type {string}
     * @memberof AppStatus
     */
    scopes?: string;
    /**
     * A list of the registration status for each FI for the application
     * @type {Array<AppFinancialInstitutionStatus>}
     * @memberof AppStatus
     */
    institutionDetails?: Array<AppFinancialInstitutionStatus>;
}

/**
 * Check if a given object implements the AppStatus interface.
 */
export function instanceOfAppStatus(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "partnerId" in value;
    isInstance = isInstance && "preAppId" in value;
    isInstance = isInstance && "appName" in value;
    isInstance = isInstance && "submittedDate" in value;
    isInstance = isInstance && "modifiedDate" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function AppStatusFromJSON(json: any): AppStatus {
    return AppStatusFromJSONTyped(json, false);
}

export function AppStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'partnerId': json['partnerId'],
        'preAppId': json['preAppId'],
        'note': !exists(json, 'note') ? undefined : json['note'],
        'applicationId': !exists(json, 'applicationId') ? undefined : json['applicationId'],
        'appName': json['appName'],
        'submittedDate': json['submittedDate'],
        'modifiedDate': json['modifiedDate'],
        'status': json['status'],
        'scopes': !exists(json, 'scopes') ? undefined : json['scopes'],
        'institutionDetails': !exists(json, 'institutionDetails') ? undefined : ((json['institutionDetails'] as Array<any>).map(AppFinancialInstitutionStatusFromJSON)),
    };
}

export function AppStatusToJSON(value?: AppStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'partnerId': value.partnerId,
        'preAppId': value.preAppId,
        'note': value.note,
        'applicationId': value.applicationId,
        'appName': value.appName,
        'submittedDate': value.submittedDate,
        'modifiedDate': value.modifiedDate,
        'status': value.status,
        'scopes': value.scopes,
        'institutionDetails': value.institutionDetails === undefined ? undefined : ((value.institutionDetails as Array<any>).map(AppFinancialInstitutionStatusToJSON)),
    };
}

