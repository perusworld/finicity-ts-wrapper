/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * TxPush subscription details
 * @export
 * @interface SubscriptionRecord
 */
export interface SubscriptionRecord {
    /**
     * ID of a TxPush subscription
     * @type {number}
     * @memberof SubscriptionRecord
     */
    id: number;
    /**
     * An account ID represented as a number
     * @type {number}
     * @memberof SubscriptionRecord
     */
    accountId: number;
    /**
     * A TxPush subscription type ("account" or "transaction")
     * @type {string}
     * @memberof SubscriptionRecord
     */
    type: string;
    /**
     * A callback URL where to receive TxPush notifications
     * @type {string}
     * @memberof SubscriptionRecord
     */
    callbackUrl: string;
    /**
     * Signing key for events
     * @type {string}
     * @memberof SubscriptionRecord
     */
    signingKey: string;
}

/**
 * Check if a given object implements the SubscriptionRecord interface.
 */
export function instanceOfSubscriptionRecord(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "accountId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "callbackUrl" in value;
    isInstance = isInstance && "signingKey" in value;

    return isInstance;
}

export function SubscriptionRecordFromJSON(json: any): SubscriptionRecord {
    return SubscriptionRecordFromJSONTyped(json, false);
}

export function SubscriptionRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubscriptionRecord {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'accountId': json['accountId'],
        'type': json['type'],
        'callbackUrl': json['callbackUrl'],
        'signingKey': json['signingKey'],
    };
}

export function SubscriptionRecordToJSON(value?: SubscriptionRecord | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'accountId': value.accountId,
        'type': value.type,
        'callbackUrl': value.callbackUrl,
        'signingKey': value.signingKey,
    };
}

