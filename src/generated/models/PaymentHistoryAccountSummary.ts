/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PaymentHistoryAccountSummaryAccountOwner } from './PaymentHistoryAccountSummaryAccountOwner';
import {
    PaymentHistoryAccountSummaryAccountOwnerFromJSON,
    PaymentHistoryAccountSummaryAccountOwnerFromJSONTyped,
    PaymentHistoryAccountSummaryAccountOwnerToJSON,
} from './PaymentHistoryAccountSummaryAccountOwner';

/**
 * Account-level summary of transactions
 * @export
 * @interface PaymentHistoryAccountSummary
 */
export interface PaymentHistoryAccountSummary {
    /**
     * Last four digits of the account
     * @type {string}
     * @memberof PaymentHistoryAccountSummary
     */
    accountNumberDisplay: string;
    /**
     * Name of the account's institution
     * @type {string}
     * @memberof PaymentHistoryAccountSummary
     */
    financialInstitution: string;
    /**
     * URL of institution icon
     * @type {string}
     * @memberof PaymentHistoryAccountSummary
     */
    institutionIcon: string;
    /**
     * A currency code
     * @type {string}
     * @memberof PaymentHistoryAccountSummary
     */
    currency: string;
    /**
     * An account status
     * @type {string}
     * @memberof PaymentHistoryAccountSummary
     */
    status: string;
    /**
     * The account name from the institution
     * @type {string}
     * @memberof PaymentHistoryAccountSummary
     */
    accountName: string;
    /**
     * 
     * @type {PaymentHistoryAccountSummaryAccountOwner}
     * @memberof PaymentHistoryAccountSummary
     */
    accountOwner: PaymentHistoryAccountSummaryAccountOwner;
    /**
     * The list of supported account types.
     * * "checking": Standard checking
     * * "savings": Standard savings
     * * "cd": Certificates of deposit
     * * "moneyMarket": Money Market
     * * "creditCard": Standard credit cards
     * * "lineOfCredit": Home equity, line of credit
     * * "investment": Generic investment (no details)
     * * "investmentTaxDeferred": Generic tax-advantaged investment (no details)
     * * "employeeStockPurchasePlan": ESPP, Employee Stock Ownership Plans (ESOP), Stock Purchase Plans
     * * "ira": Individual Retirement Account (not Rollover or Roth)
     * * "401k": 401K Plan
     * * "roth": Roth IRA, Roth 401K
     * * "403b": 403B Plan
     * * "529plan": 529 Plan (True value is 529)
     * * "rollover": Rollover IRA
     * * "ugma": Uniform Gifts to Minors Act
     * * "utma": Uniform Transfers to Minors Act
     * * "keogh": Keogh Plan
     * * "457plan": 457 Plan (True value is 457)
     * * "401a": 401A Plan
     * * "brokerageAccount": Brokerage Account
     * * "educationSavings": Education Savings Account that is not a 529
     * * "healthSavingsAccount": HSA (Health Savings Accounts)
     * * "pension": Pension
     * * "profitSharingPlan": Profit Sharing Plan
     * * "roth401k": Roth 401K
     * * "sepIRA": Simplified Employee Pension IRA
     * * "simpleIRA": Simple IRA
     * * "thriftSavingsPlan": Thrift Savings Plan
     * * "variableAnnuity": Variable Annuity
     * * "cryptocurrency": Cryptocurrency Wallet, Cryptocurrency Account
     * * "mortgage": Standard Mortgages
     * * "loan": Auto loans, equity loans, other loans
     * * "studentLoan": Student Loan
     * * "studentLoanGroup": Student Loan Group
     * * "studentLoanAccount": Student Loan Account
     * @type {string}
     * @memberof PaymentHistoryAccountSummary
     */
    accountType: string;
    /**
     * Beginning balance of account
     * @type {number}
     * @memberof PaymentHistoryAccountSummary
     */
    beginningBalance: number;
    /**
     * Monthly average balance of account
     * @type {number}
     * @memberof PaymentHistoryAccountSummary
     */
    averageMonthlyBalance: number;
    /**
     * Current balance of account
     * @type {number}
     * @memberof PaymentHistoryAccountSummary
     */
    currentBalance: number;
    /**
     * Begin date of account
     * @type {string}
     * @memberof PaymentHistoryAccountSummary
     */
    beginDate: string;
    /**
     * End date of account
     * @type {string}
     * @memberof PaymentHistoryAccountSummary
     */
    endDate: string;
    /**
     * Total of nsf transactions in this account
     * @type {number}
     * @memberof PaymentHistoryAccountSummary
     */
    totalNonsufficientFunds?: number;
    /**
     * Days since the latest nsf transaction for this account
     * @type {number}
     * @memberof PaymentHistoryAccountSummary
     */
    daysSinceNonsufficientFunds: number;
}

/**
 * Check if a given object implements the PaymentHistoryAccountSummary interface.
 */
export function instanceOfPaymentHistoryAccountSummary(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accountNumberDisplay" in value;
    isInstance = isInstance && "financialInstitution" in value;
    isInstance = isInstance && "institutionIcon" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "accountName" in value;
    isInstance = isInstance && "accountOwner" in value;
    isInstance = isInstance && "accountType" in value;
    isInstance = isInstance && "beginningBalance" in value;
    isInstance = isInstance && "averageMonthlyBalance" in value;
    isInstance = isInstance && "currentBalance" in value;
    isInstance = isInstance && "beginDate" in value;
    isInstance = isInstance && "endDate" in value;
    isInstance = isInstance && "daysSinceNonsufficientFunds" in value;

    return isInstance;
}

export function PaymentHistoryAccountSummaryFromJSON(json: any): PaymentHistoryAccountSummary {
    return PaymentHistoryAccountSummaryFromJSONTyped(json, false);
}

export function PaymentHistoryAccountSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentHistoryAccountSummary {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountNumberDisplay': json['accountNumberDisplay'],
        'financialInstitution': json['financialInstitution'],
        'institutionIcon': json['institutionIcon'],
        'currency': json['currency'],
        'status': json['status'],
        'accountName': json['accountName'],
        'accountOwner': PaymentHistoryAccountSummaryAccountOwnerFromJSON(json['accountOwner']),
        'accountType': json['accountType'],
        'beginningBalance': json['beginningBalance'],
        'averageMonthlyBalance': json['averageMonthlyBalance'],
        'currentBalance': json['currentBalance'],
        'beginDate': json['beginDate'],
        'endDate': json['endDate'],
        'totalNonsufficientFunds': !exists(json, 'totalNonsufficientFunds') ? undefined : json['totalNonsufficientFunds'],
        'daysSinceNonsufficientFunds': json['daysSinceNonsufficientFunds'],
    };
}

export function PaymentHistoryAccountSummaryToJSON(value?: PaymentHistoryAccountSummary | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accountNumberDisplay': value.accountNumberDisplay,
        'financialInstitution': value.financialInstitution,
        'institutionIcon': value.institutionIcon,
        'currency': value.currency,
        'status': value.status,
        'accountName': value.accountName,
        'accountOwner': PaymentHistoryAccountSummaryAccountOwnerToJSON(value.accountOwner),
        'accountType': value.accountType,
        'beginningBalance': value.beginningBalance,
        'averageMonthlyBalance': value.averageMonthlyBalance,
        'currentBalance': value.currentBalance,
        'beginDate': value.beginDate,
        'endDate': value.endDate,
        'totalNonsufficientFunds': value.totalNonsufficientFunds,
        'daysSinceNonsufficientFunds': value.daysSinceNonsufficientFunds,
    };
}

