/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MainPayStatementFields
 */
export interface MainPayStatementFields {
    /**
     * Pay date for the pay period
     * @type {number}
     * @memberof MainPayStatementFields
     */
    payDate: number;
    /**
     * Start date for the pay period
     * @type {number}
     * @memberof MainPayStatementFields
     */
    startDate?: number;
    /**
     * End date for the pay period
     * @type {number}
     * @memberof MainPayStatementFields
     */
    endDate?: number;
    /**
     * Sum of all hours worked each week for the pay period
     * @type {number}
     * @memberof MainPayStatementFields
     */
    payPeriodHours?: number;
    /**
     * The current pay frequency, or how often a regular pay check is  
     * distributed:
     * 
     * * `Daily`
     * 
     * * `Weekly`
     * 
     * * `Bi-Weekly`
     * 
     * * `Semi-Monthly`
     * 
     * * `Monthly`
     * 
     * * `Quarterly`
     * 
     * * `Semi-Annual`
     * 
     * * `Annual`
     * 
     * * `Every 2.6 wks`
     * 
     * * `Every 4 wks`
     * 
     * * `Every 5.2 wks`
     * 
     * * `Other`
     * 
     * @type {string}
     * @memberof MainPayStatementFields
     */
    payFrequency?: string;
    /**
     * Current pay type:
     * 
     * * `Salary`
     * 
     * * `Hourly`
     * 
     * * `Daily`
     * 
     * @type {string}
     * @memberof MainPayStatementFields
     */
    payType?: string;
    /**
     * Gross pay amount for the pay period
     * @type {number}
     * @memberof MainPayStatementFields
     */
    grossPayAmount: number;
    /**
     * Year to date (YTD) gross pay amount at the time of payment
     * @type {number}
     * @memberof MainPayStatementFields
     */
    grossPayAmountYTD?: number;
    /**
     * Net pay amount for a pay period
     * @type {number}
     * @memberof MainPayStatementFields
     */
    netPayAmount?: number;
    /**
     * Year to date (YTD) net pay amount at the time of payment
     * @type {number}
     * @memberof MainPayStatementFields
     */
    netPayAmountYTD?: number;
}

/**
 * Check if a given object implements the MainPayStatementFields interface.
 */
export function instanceOfMainPayStatementFields(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "payDate" in value;
    isInstance = isInstance && "grossPayAmount" in value;

    return isInstance;
}

export function MainPayStatementFieldsFromJSON(json: any): MainPayStatementFields {
    return MainPayStatementFieldsFromJSONTyped(json, false);
}

export function MainPayStatementFieldsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MainPayStatementFields {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'payDate': json['payDate'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'payPeriodHours': !exists(json, 'payPeriodHours') ? undefined : json['payPeriodHours'],
        'payFrequency': !exists(json, 'payFrequency') ? undefined : json['payFrequency'],
        'payType': !exists(json, 'payType') ? undefined : json['payType'],
        'grossPayAmount': json['grossPayAmount'],
        'grossPayAmountYTD': !exists(json, 'grossPayAmountYTD') ? undefined : json['grossPayAmountYTD'],
        'netPayAmount': !exists(json, 'netPayAmount') ? undefined : json['netPayAmount'],
        'netPayAmountYTD': !exists(json, 'netPayAmountYTD') ? undefined : json['netPayAmountYTD'],
    };
}

export function MainPayStatementFieldsToJSON(value?: MainPayStatementFields | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'payDate': value.payDate,
        'startDate': value.startDate,
        'endDate': value.endDate,
        'payPeriodHours': value.payPeriodHours,
        'payFrequency': value.payFrequency,
        'payType': value.payType,
        'grossPayAmount': value.grossPayAmount,
        'grossPayAmountYTD': value.grossPayAmountYTD,
        'netPayAmount': value.netPayAmount,
        'netPayAmountYTD': value.netPayAmountYTD,
    };
}

