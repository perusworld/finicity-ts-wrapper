/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ObbDateRangeAndAmount } from './ObbDateRangeAndAmount';
import {
    ObbDateRangeAndAmountFromJSON,
    ObbDateRangeAndAmountFromJSONTyped,
    ObbDateRangeAndAmountToJSON,
} from './ObbDateRangeAndAmount';
import type { ObbDateRangeAndCount } from './ObbDateRangeAndCount';
import {
    ObbDateRangeAndCountFromJSON,
    ObbDateRangeAndCountFromJSONTyped,
    ObbDateRangeAndCountToJSON,
} from './ObbDateRangeAndCount';

/**
 * Outflow attributes
 * @export
 * @interface CashFlowOutflowAttributes
 */
export interface CashFlowOutflowAttributes {
    /**
     * Average value of withdrawals during periods in the report
     * @type {Array<ObbDateRangeAndAmount>}
     * @memberof CashFlowOutflowAttributes
     */
    averageWithdrawalByMonthForTheReportTimePeriod?: Array<ObbDateRangeAndAmount>;
    /**
     * Count of all withdrawals during periods in the report
     * @type {Array<ObbDateRangeAndCount>}
     * @memberof CashFlowOutflowAttributes
     */
    countWithdrawalsByMonthForTheReportTimePeriod: Array<ObbDateRangeAndCount>;
    /**
     * Count of ALL withdrawals over entire known history of the account (may exceed requested length of report)
     * @type {number}
     * @memberof CashFlowOutflowAttributes
     */
    historicCountOfWithdrawalTransactions: number;
    /**
     * Sum of ALL withdrawals over entire known history of the account (may exceed requested length of report)
     * @type {number}
     * @memberof CashFlowOutflowAttributes
     */
    historicSumOfWithdrawals?: number;
    /**
     * Maximum withdrawal value for different periods in the report
     * @type {Array<ObbDateRangeAndAmount>}
     * @memberof CashFlowOutflowAttributes
     */
    maximumWithdrawalByMonthForTheReportTimePeriod: Array<ObbDateRangeAndAmount>;
    /**
     * Minimum withdrawal value for different periods in the report
     * @type {Array<ObbDateRangeAndAmount>}
     * @memberof CashFlowOutflowAttributes
     */
    minimumWithdrawalByMonthForTheReportTimePeriod: Array<ObbDateRangeAndAmount>;
    /**
     * Sum of all withdrawals during periods in the report
     * @type {Array<ObbDateRangeAndAmount>}
     * @memberof CashFlowOutflowAttributes
     */
    sumWithdrawalsByMonthForTheReportTimePeriod: Array<ObbDateRangeAndAmount>;
}

/**
 * Check if a given object implements the CashFlowOutflowAttributes interface.
 */
export function instanceOfCashFlowOutflowAttributes(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "countWithdrawalsByMonthForTheReportTimePeriod" in value;
    isInstance = isInstance && "historicCountOfWithdrawalTransactions" in value;
    isInstance = isInstance && "maximumWithdrawalByMonthForTheReportTimePeriod" in value;
    isInstance = isInstance && "minimumWithdrawalByMonthForTheReportTimePeriod" in value;
    isInstance = isInstance && "sumWithdrawalsByMonthForTheReportTimePeriod" in value;

    return isInstance;
}

export function CashFlowOutflowAttributesFromJSON(json: any): CashFlowOutflowAttributes {
    return CashFlowOutflowAttributesFromJSONTyped(json, false);
}

export function CashFlowOutflowAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): CashFlowOutflowAttributes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'averageWithdrawalByMonthForTheReportTimePeriod': !exists(json, 'averageWithdrawalByMonthForTheReportTimePeriod') ? undefined : ((json['averageWithdrawalByMonthForTheReportTimePeriod'] as Array<any>).map(ObbDateRangeAndAmountFromJSON)),
        'countWithdrawalsByMonthForTheReportTimePeriod': ((json['countWithdrawalsByMonthForTheReportTimePeriod'] as Array<any>).map(ObbDateRangeAndCountFromJSON)),
        'historicCountOfWithdrawalTransactions': json['historicCountOfWithdrawalTransactions'],
        'historicSumOfWithdrawals': !exists(json, 'historicSumOfWithdrawals') ? undefined : json['historicSumOfWithdrawals'],
        'maximumWithdrawalByMonthForTheReportTimePeriod': ((json['maximumWithdrawalByMonthForTheReportTimePeriod'] as Array<any>).map(ObbDateRangeAndAmountFromJSON)),
        'minimumWithdrawalByMonthForTheReportTimePeriod': ((json['minimumWithdrawalByMonthForTheReportTimePeriod'] as Array<any>).map(ObbDateRangeAndAmountFromJSON)),
        'sumWithdrawalsByMonthForTheReportTimePeriod': ((json['sumWithdrawalsByMonthForTheReportTimePeriod'] as Array<any>).map(ObbDateRangeAndAmountFromJSON)),
    };
}

export function CashFlowOutflowAttributesToJSON(value?: CashFlowOutflowAttributes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'averageWithdrawalByMonthForTheReportTimePeriod': value.averageWithdrawalByMonthForTheReportTimePeriod === undefined ? undefined : ((value.averageWithdrawalByMonthForTheReportTimePeriod as Array<any>).map(ObbDateRangeAndAmountToJSON)),
        'countWithdrawalsByMonthForTheReportTimePeriod': ((value.countWithdrawalsByMonthForTheReportTimePeriod as Array<any>).map(ObbDateRangeAndCountToJSON)),
        'historicCountOfWithdrawalTransactions': value.historicCountOfWithdrawalTransactions,
        'historicSumOfWithdrawals': value.historicSumOfWithdrawals,
        'maximumWithdrawalByMonthForTheReportTimePeriod': ((value.maximumWithdrawalByMonthForTheReportTimePeriod as Array<any>).map(ObbDateRangeAndAmountToJSON)),
        'minimumWithdrawalByMonthForTheReportTimePeriod': ((value.minimumWithdrawalByMonthForTheReportTimePeriod as Array<any>).map(ObbDateRangeAndAmountToJSON)),
        'sumWithdrawalsByMonthForTheReportTimePeriod': ((value.sumWithdrawalsByMonthForTheReportTimePeriod as Array<any>).map(ObbDateRangeAndAmountToJSON)),
    };
}

