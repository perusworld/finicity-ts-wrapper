/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountOwnerAddress } from './AccountOwnerAddress';
import {
    AccountOwnerAddressFromJSON,
    AccountOwnerAddressFromJSONTyped,
    AccountOwnerAddressToJSON,
} from './AccountOwnerAddress';
import type { AccountOwnerDocumentation } from './AccountOwnerDocumentation';
import {
    AccountOwnerDocumentationFromJSON,
    AccountOwnerDocumentationFromJSONTyped,
    AccountOwnerDocumentationToJSON,
} from './AccountOwnerDocumentation';
import type { AccountOwnerEmail } from './AccountOwnerEmail';
import {
    AccountOwnerEmailFromJSON,
    AccountOwnerEmailFromJSONTyped,
    AccountOwnerEmailToJSON,
} from './AccountOwnerEmail';
import type { AccountOwnerIdentityInsights } from './AccountOwnerIdentityInsights';
import {
    AccountOwnerIdentityInsightsFromJSON,
    AccountOwnerIdentityInsightsFromJSONTyped,
    AccountOwnerIdentityInsightsToJSON,
} from './AccountOwnerIdentityInsights';
import type { AccountOwnerPhone } from './AccountOwnerPhone';
import {
    AccountOwnerPhoneFromJSON,
    AccountOwnerPhoneFromJSONTyped,
    AccountOwnerPhoneToJSON,
} from './AccountOwnerPhone';

/**
 * Owner of a customer account
 * @export
 * @interface AccountOwnerDetails
 */
export interface AccountOwnerDetails {
    /**
     * The type of relationship to the account:  
     * * "AUTHORIZED_USER"  
     * 
     * * "BUSINESS"   
     * 
     * * "FOR_BENEFIT_OF_PRIMARY"  
     * 
     * * "FOR_BENEFIT_OF_PRIMARY_JOINT_RESTRICTED"  
     * 
     * * "FOR_BENEFIT_OF_SECONDARY"
     * 
     * * "FOR_BENEFIT_OF_SECONDARY_JOINT_RESTRICTED"
     * 
     * * "FOR_BENEFIT_OF_SOLE_OWNER_RESTRICTED"
     * 
     * * "POWER_OF_ATTORNEY"
     * 
     * * "PRIMARY_JOINT_TENANTS"
     * 
     * * "PRIMARY"
     * 
     * * "PRIMARY_BORROWER"
     * 
     * * "PRIMARY_JOINT"
     * 
     * * "SECONDARY"
     * 
     * * "SECONDARY_JOINT_TENANTS"
     * 
     * * "SECONDARY_BORROWER"
     * 
     * * "SECONDARY_JOINT"
     * 
     * * "SOLE_OWNER"
     * 
     * * "TRUSTEE"
     * 
     * * "UNIFORM_TRANSFER_TO_MINOR"
     * @type {string}
     * @memberof AccountOwnerDetails
     */
    relationship?: string;
    /**
     * The full name of the account owner. Multiple account owners are returned in one string per the source data from the institution.
     * @type {string}
     * @memberof AccountOwnerDetails
     */
    ownerName: string;
    /**
     * The first name of the account holder
     * @type {string}
     * @memberof AccountOwnerDetails
     */
    firstName?: string;
    /**
     * The middle name of the account holder
     * @type {string}
     * @memberof AccountOwnerDetails
     */
    middleName?: string;
    /**
     * The last name of the account holder
     * @type {string}
     * @memberof AccountOwnerDetails
     */
    lastName?: string;
    /**
     * A generational or academic suffix
     * @type {string}
     * @memberof AccountOwnerDetails
     */
    suffix?: string;
    /**
     * The classification of the account holder:
     * * "person / personal / home"
     * * "business"
     * * "other"
     * @type {string}
     * @memberof AccountOwnerDetails
     */
    nameClassification?: string;
    /**
     * The confidence score 0-100 of the name classification.
     * @type {number}
     * @memberof AccountOwnerDetails
     */
    nameClassificationconfidencescore?: number;
    /**
     * List of addresses
     * @type {Array<AccountOwnerAddress>}
     * @memberof AccountOwnerDetails
     */
    addresses: Array<AccountOwnerAddress>;
    /**
     * List of emails
     * @type {Array<AccountOwnerEmail>}
     * @memberof AccountOwnerDetails
     */
    emails?: Array<AccountOwnerEmail>;
    /**
     * List of phones
     * @type {Array<AccountOwnerPhone>}
     * @memberof AccountOwnerDetails
     */
    phones?: Array<AccountOwnerPhone>;
    /**
     * List of account owner documentation
     * @type {Array<AccountOwnerDocumentation>}
     * @memberof AccountOwnerDetails
     */
    documentations?: Array<AccountOwnerDocumentation>;
    /**
     * 
     * @type {AccountOwnerIdentityInsights}
     * @memberof AccountOwnerDetails
     */
    identityInsights?: AccountOwnerIdentityInsights;
}

/**
 * Check if a given object implements the AccountOwnerDetails interface.
 */
export function instanceOfAccountOwnerDetails(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ownerName" in value;
    isInstance = isInstance && "addresses" in value;

    return isInstance;
}

export function AccountOwnerDetailsFromJSON(json: any): AccountOwnerDetails {
    return AccountOwnerDetailsFromJSONTyped(json, false);
}

export function AccountOwnerDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountOwnerDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'relationship': !exists(json, 'relationship') ? undefined : json['relationship'],
        'ownerName': json['ownerName'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'middleName': !exists(json, 'middleName') ? undefined : json['middleName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'suffix': !exists(json, 'suffix') ? undefined : json['suffix'],
        'nameClassification': !exists(json, 'nameClassification') ? undefined : json['nameClassification'],
        'nameClassificationconfidencescore': !exists(json, 'nameClassificationconfidencescore') ? undefined : json['nameClassificationconfidencescore'],
        'addresses': ((json['addresses'] as Array<any>).map(AccountOwnerAddressFromJSON)),
        'emails': !exists(json, 'emails') ? undefined : ((json['emails'] as Array<any>).map(AccountOwnerEmailFromJSON)),
        'phones': !exists(json, 'phones') ? undefined : ((json['phones'] as Array<any>).map(AccountOwnerPhoneFromJSON)),
        'documentations': !exists(json, 'documentations') ? undefined : ((json['documentations'] as Array<any>).map(AccountOwnerDocumentationFromJSON)),
        'identityInsights': !exists(json, 'identityInsights') ? undefined : AccountOwnerIdentityInsightsFromJSON(json['identityInsights']),
    };
}

export function AccountOwnerDetailsToJSON(value?: AccountOwnerDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'relationship': value.relationship,
        'ownerName': value.ownerName,
        'firstName': value.firstName,
        'middleName': value.middleName,
        'lastName': value.lastName,
        'suffix': value.suffix,
        'nameClassification': value.nameClassification,
        'nameClassificationconfidencescore': value.nameClassificationconfidencescore,
        'addresses': ((value.addresses as Array<any>).map(AccountOwnerAddressToJSON)),
        'emails': value.emails === undefined ? undefined : ((value.emails as Array<any>).map(AccountOwnerEmailToJSON)),
        'phones': value.phones === undefined ? undefined : ((value.phones as Array<any>).map(AccountOwnerPhoneToJSON)),
        'documentations': value.documentations === undefined ? undefined : ((value.documentations as Array<any>).map(AccountOwnerDocumentationToJSON)),
        'identityInsights': AccountOwnerIdentityInsightsToJSON(value.identityInsights),
    };
}

