/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorMessage,
  Report,
  ReportSummaries,
} from '../models/index';
import {
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    ReportFromJSON,
    ReportToJSON,
    ReportSummariesFromJSON,
    ReportSummariesToJSON,
} from '../models/index';

export interface GetReportByConsumerRequest {
    consumerId: string;
    reportId: string;
    purpose?: string;
    onBehalfOf?: string;
}

export interface GetReportByCustomerRequest {
    customerId: string;
    reportId: string;
    onBehalfOf?: string;
    purpose?: string;
}

export interface GetReportsByConsumerIdRequest {
    consumerId: string;
    purpose?: string;
}

export interface GetReportsByCustomerIdRequest {
    customerId: string;
    purpose?: string;
}

/**
 * 
 */
export class ReportsApi extends runtime.BaseAPI {

    /**
     * Get a report that has been generated by a previous call to one of the Generate Report services.  The report\'s `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Report by Consumer and ID
     */
    async getReportByConsumerRaw(requestParameters: GetReportByConsumerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Report>> {
        if (requestParameters.consumerId === null || requestParameters.consumerId === undefined) {
            throw new runtime.RequiredError('consumerId','Required parameter requestParameters.consumerId was null or undefined when calling getReportByConsumer.');
        }

        if (requestParameters.reportId === null || requestParameters.reportId === undefined) {
            throw new runtime.RequiredError('reportId','Required parameter requestParameters.reportId was null or undefined when calling getReportByConsumer.');
        }

        const queryParameters: any = {};

        if (requestParameters.purpose !== undefined) {
            queryParameters['purpose'] = requestParameters.purpose;
        }

        if (requestParameters.onBehalfOf !== undefined) {
            queryParameters['onBehalfOf'] = requestParameters.onBehalfOf;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/decisioning/v3/consumers/{consumerId}/reports/{reportId}`.replace(`{${"consumerId"}}`, encodeURIComponent(String(requestParameters.consumerId))).replace(`{${"reportId"}}`, encodeURIComponent(String(requestParameters.reportId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportFromJSON(jsonValue));
    }

    /**
     * Get a report that has been generated by a previous call to one of the Generate Report services.  The report\'s `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Report by Consumer and ID
     */
    async getReportByConsumer(requestParameters: GetReportByConsumerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Report> {
        const response = await this.getReportByConsumerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a report that has been generated by a previous call to one of the Generate Report services.  The report\'s `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Report by Customer and ID
     */
    async getReportByCustomerRaw(requestParameters: GetReportByCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Report>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getReportByCustomer.');
        }

        if (requestParameters.reportId === null || requestParameters.reportId === undefined) {
            throw new runtime.RequiredError('reportId','Required parameter requestParameters.reportId was null or undefined when calling getReportByCustomer.');
        }

        const queryParameters: any = {};

        if (requestParameters.onBehalfOf !== undefined) {
            queryParameters['onBehalfOf'] = requestParameters.onBehalfOf;
        }

        if (requestParameters.purpose !== undefined) {
            queryParameters['purpose'] = requestParameters.purpose;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/decisioning/v3/customers/{customerId}/reports/{reportId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"reportId"}}`, encodeURIComponent(String(requestParameters.reportId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportFromJSON(jsonValue));
    }

    /**
     * Get a report that has been generated by a previous call to one of the Generate Report services.  The report\'s `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Report by Customer and ID
     */
    async getReportByCustomer(requestParameters: GetReportByCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Report> {
        const response = await this.getReportByCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all reports that have been generated by previous calls to Generate Report services for the given consumer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Reports by Consumer ID
     */
    async getReportsByConsumerIdRaw(requestParameters: GetReportsByConsumerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportSummaries>> {
        if (requestParameters.consumerId === null || requestParameters.consumerId === undefined) {
            throw new runtime.RequiredError('consumerId','Required parameter requestParameters.consumerId was null or undefined when calling getReportsByConsumerId.');
        }

        const queryParameters: any = {};

        if (requestParameters.purpose !== undefined) {
            queryParameters['purpose'] = requestParameters.purpose;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/decisioning/v1/consumers/{consumerId}/reports`.replace(`{${"consumerId"}}`, encodeURIComponent(String(requestParameters.consumerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportSummariesFromJSON(jsonValue));
    }

    /**
     * Get all reports that have been generated by previous calls to Generate Report services for the given consumer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Reports by Consumer ID
     */
    async getReportsByConsumerId(requestParameters: GetReportsByConsumerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportSummaries> {
        const response = await this.getReportsByConsumerIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all reports that have been generated by previous calls to Generate Report services for the given customer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Reports by Customer ID
     */
    async getReportsByCustomerIdRaw(requestParameters: GetReportsByCustomerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportSummaries>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getReportsByCustomerId.');
        }

        const queryParameters: any = {};

        if (requestParameters.purpose !== undefined) {
            queryParameters['purpose'] = requestParameters.purpose;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/decisioning/v1/customers/{customerId}/reports`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportSummariesFromJSON(jsonValue));
    }

    /**
     * Get all reports that have been generated by previous calls to Generate Report services for the given customer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Reports by Customer ID
     */
    async getReportsByCustomerId(requestParameters: GetReportsByCustomerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportSummaries> {
        const response = await this.getReportsByCustomerIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
