/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatedTestTxPushTransaction,
  ErrorMessage,
  TestTxPushTransaction,
  TxPushSubscriptionParameters,
  TxPushSubscriptions,
} from '../models/index';
import {
    CreatedTestTxPushTransactionFromJSON,
    CreatedTestTxPushTransactionToJSON,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    TestTxPushTransactionFromJSON,
    TestTxPushTransactionToJSON,
    TxPushSubscriptionParametersFromJSON,
    TxPushSubscriptionParametersToJSON,
    TxPushSubscriptionsFromJSON,
    TxPushSubscriptionsToJSON,
} from '../models/index';

export interface CreateTxPushTestTransactionRequest {
    customerId: string;
    accountId: string;
    testTxPushTransaction: TestTxPushTransaction;
}

export interface DeleteTxPushSubscriptionRequest {
    customerId: string;
    subscriptionId: number;
}

export interface DisableTxPushNotificationsRequest {
    customerId: string;
    accountId: string;
}

export interface SubscribeToTxPushNotificationsRequest {
    customerId: string;
    accountId: string;
    txPushSubscriptionParameters: TxPushSubscriptionParameters;
}

/**
 * 
 */
export class TxPushApi extends runtime.BaseAPI {

    /**
     * Inject a transaction into the transaction list for a testing account. This allows an app to trigger TxPush notifications for the account in order to test the app\'s TxPush Listener service. This causes the platform to send one transaction event and one account event (showing that the account balance has changed). This service is only supported for testing accounts.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Create TxPush Test Transaction
     */
    async createTxPushTestTransactionRaw(requestParameters: CreateTxPushTestTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatedTestTxPushTransaction>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling createTxPushTestTransaction.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling createTxPushTestTransaction.');
        }

        if (requestParameters.testTxPushTransaction === null || requestParameters.testTxPushTransaction === undefined) {
            throw new runtime.RequiredError('testTxPushTransaction','Required parameter requestParameters.testTxPushTransaction was null or undefined when calling createTxPushTestTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v1/customers/{customerId}/accounts/{accountId}/transactions`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TestTxPushTransactionToJSON(requestParameters.testTxPushTransaction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatedTestTxPushTransactionFromJSON(jsonValue));
    }

    /**
     * Inject a transaction into the transaction list for a testing account. This allows an app to trigger TxPush notifications for the account in order to test the app\'s TxPush Listener service. This causes the platform to send one transaction event and one account event (showing that the account balance has changed). This service is only supported for testing accounts.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Create TxPush Test Transaction
     */
    async createTxPushTestTransaction(requestParameters: CreateTxPushTestTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatedTestTxPushTransaction> {
        const response = await this.createTxPushTestTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific subscription to TxPush notifications for the given account. This could be individual deleting the account or transactions events. No more events will be sent for that specific subscription.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Delete TxPush Subscription
     */
    async deleteTxPushSubscriptionRaw(requestParameters: DeleteTxPushSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling deleteTxPushSubscription.');
        }

        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling deleteTxPushSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v1/customers/{customerId}/subscriptions/{subscriptionId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific subscription to TxPush notifications for the given account. This could be individual deleting the account or transactions events. No more events will be sent for that specific subscription.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Delete TxPush Subscription
     */
    async deleteTxPushSubscription(requestParameters: DeleteTxPushSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTxPushSubscriptionRaw(requestParameters, initOverrides);
    }

    /**
     * Delete all TxPush subscriptions with their notifications for the given account. No more notifications will be sent for account or transaction events.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Disable TxPush Notifications
     */
    async disableTxPushNotificationsRaw(requestParameters: DisableTxPushNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling disableTxPushNotifications.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling disableTxPushNotifications.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v1/customers/{customerId}/accounts/{accountId}/txpush`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all TxPush subscriptions with their notifications for the given account. No more notifications will be sent for account or transaction events.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Disable TxPush Notifications
     */
    async disableTxPushNotifications(requestParameters: DisableTxPushNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.disableTxPushNotificationsRaw(requestParameters, initOverrides);
    }

    /**
     * Register a client app\'s TxPush Listener to receive TxPush notifications related to the given account.  Each call to this service will return two records, one with class account and one with class transaction. Account events are sent when values change in the account\'s fields (such as `balance` or `interestRate`). Transaction events are sent whenever a new transaction is posted for the account. For institutions that do not provide TxPush services, notifications are sent as soon as Finicity finds a new transaction or new account data through regular aggregation processes.  The listener\'s URL must be secure (HTTPS) for any real-world account. In addition, the client\'s TxPush Listener will need to be verified. HTTP and HTTPS connections are only allowed on the standard ports 80 (HTTP) and 443 (HTTPS). The use of other ports will result with the call failing.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Subscribe to TxPush Notifications
     */
    async subscribeToTxPushNotificationsRaw(requestParameters: SubscribeToTxPushNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TxPushSubscriptions>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling subscribeToTxPushNotifications.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling subscribeToTxPushNotifications.');
        }

        if (requestParameters.txPushSubscriptionParameters === null || requestParameters.txPushSubscriptionParameters === undefined) {
            throw new runtime.RequiredError('txPushSubscriptionParameters','Required parameter requestParameters.txPushSubscriptionParameters was null or undefined when calling subscribeToTxPushNotifications.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v1/customers/{customerId}/accounts/{accountId}/txpush`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TxPushSubscriptionParametersToJSON(requestParameters.txPushSubscriptionParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TxPushSubscriptionsFromJSON(jsonValue));
    }

    /**
     * Register a client app\'s TxPush Listener to receive TxPush notifications related to the given account.  Each call to this service will return two records, one with class account and one with class transaction. Account events are sent when values change in the account\'s fields (such as `balance` or `interestRate`). Transaction events are sent whenever a new transaction is posted for the account. For institutions that do not provide TxPush services, notifications are sent as soon as Finicity finds a new transaction or new account data through regular aggregation processes.  The listener\'s URL must be secure (HTTPS) for any real-world account. In addition, the client\'s TxPush Listener will need to be verified. HTTP and HTTPS connections are only allowed on the standard ports 80 (HTTP) and 443 (HTTPS). The use of other ports will result with the call failing.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Subscribe to TxPush Notifications
     */
    async subscribeToTxPushNotifications(requestParameters: SubscribeToTxPushNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TxPushSubscriptions> {
        const response = await this.subscribeToTxPushNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
