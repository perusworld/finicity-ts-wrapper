/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BrandingWrapper,
  CertifiedInstitutions,
  ErrorMessage,
  InstitutionWrapper,
  Institutions,
} from '../models/index';
import {
    BrandingWrapperFromJSON,
    BrandingWrapperToJSON,
    CertifiedInstitutionsFromJSON,
    CertifiedInstitutionsToJSON,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    InstitutionWrapperFromJSON,
    InstitutionWrapperToJSON,
    InstitutionsFromJSON,
    InstitutionsToJSON,
} from '../models/index';

export interface GetCertifiedInstitutionsRequest {
    search?: string;
    start?: number;
    limit?: number;
    type?: string;
    supportedCountries?: Array<string>;
}

export interface GetCertifiedInstitutionsWithRSSDRequest {
    search?: string;
    start?: number;
    limit?: number;
    type?: string;
    supportedCountries?: Array<string>;
}

export interface GetInstitutionRequest {
    institutionId: number;
}

export interface GetInstitutionBrandingRequest {
    institutionId: number;
}

export interface GetInstitutionsRequest {
    search?: string;
    start?: number;
    limit?: number;
    type?: string;
    supportedCountries?: Array<string>;
}

/**
 * 
 */
export class InstitutionsApi extends runtime.BaseAPI {

    /**
     * Search for financial institutions by certified product.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Certified Institutions
     */
    async getCertifiedInstitutionsRaw(requestParameters: GetCertifiedInstitutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertifiedInstitutions>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.supportedCountries) {
            queryParameters['supportedCountries'] = requestParameters.supportedCountries.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/institution/v2/certifiedInstitutions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertifiedInstitutionsFromJSON(jsonValue));
    }

    /**
     * Search for financial institutions by certified product.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Certified Institutions
     */
    async getCertifiedInstitutions(requestParameters: GetCertifiedInstitutionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertifiedInstitutions> {
        const response = await this.getCertifiedInstitutionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for certified financial institutions w/RSSD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Certified Institutions With RSSD
     */
    async getCertifiedInstitutionsWithRSSDRaw(requestParameters: GetCertifiedInstitutionsWithRSSDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertifiedInstitutions>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.supportedCountries) {
            queryParameters['supportedCountries'] = requestParameters.supportedCountries.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/institution/v2/certifiedInstitutions/rssd`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertifiedInstitutionsFromJSON(jsonValue));
    }

    /**
     * Search for certified financial institutions w/RSSD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Certified Institutions With RSSD
     */
    async getCertifiedInstitutionsWithRSSD(requestParameters: GetCertifiedInstitutionsWithRSSDRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertifiedInstitutions> {
        const response = await this.getCertifiedInstitutionsWithRSSDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get financial institution details by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Institution by ID
     */
    async getInstitutionRaw(requestParameters: GetInstitutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstitutionWrapper>> {
        if (requestParameters.institutionId === null || requestParameters.institutionId === undefined) {
            throw new runtime.RequiredError('institutionId','Required parameter requestParameters.institutionId was null or undefined when calling getInstitution.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/institution/v2/institutions/{institutionId}`.replace(`{${"institutionId"}}`, encodeURIComponent(String(requestParameters.institutionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstitutionWrapperFromJSON(jsonValue));
    }

    /**
     * Get financial institution details by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Institution by ID
     */
    async getInstitution(requestParameters: GetInstitutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstitutionWrapper> {
        const response = await this.getInstitutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the branding information for a financial institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Institution Branding by ID
     */
    async getInstitutionBrandingRaw(requestParameters: GetInstitutionBrandingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrandingWrapper>> {
        if (requestParameters.institutionId === null || requestParameters.institutionId === undefined) {
            throw new runtime.RequiredError('institutionId','Required parameter requestParameters.institutionId was null or undefined when calling getInstitutionBranding.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/institution/v2/institutions/{institutionId}/branding`.replace(`{${"institutionId"}}`, encodeURIComponent(String(requestParameters.institutionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandingWrapperFromJSON(jsonValue));
    }

    /**
     * Return the branding information for a financial institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Institution Branding by ID
     */
    async getInstitutionBranding(requestParameters: GetInstitutionBrandingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrandingWrapper> {
        const response = await this.getInstitutionBrandingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for financial institutions.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Institutions
     */
    async getInstitutionsRaw(requestParameters: GetInstitutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Institutions>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.supportedCountries) {
            queryParameters['supportedCountries'] = requestParameters.supportedCountries.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/institution/v2/institutions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstitutionsFromJSON(jsonValue));
    }

    /**
     * Search for financial institutions.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Institutions
     */
    async getInstitutions(requestParameters: GetInstitutionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Institutions> {
        const response = await this.getInstitutionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
