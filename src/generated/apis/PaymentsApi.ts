/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ACHDetails,
  AccountOwner,
  AccountOwnerHolders,
  AvailableBalance,
  ErrorMessage,
  LoanPaymentDetails,
} from '../models/index';
import {
    ACHDetailsFromJSON,
    ACHDetailsToJSON,
    AccountOwnerFromJSON,
    AccountOwnerToJSON,
    AccountOwnerHoldersFromJSON,
    AccountOwnerHoldersToJSON,
    AvailableBalanceFromJSON,
    AvailableBalanceToJSON,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    LoanPaymentDetailsFromJSON,
    LoanPaymentDetailsToJSON,
} from '../models/index';

export interface GetAccountACHDetailsRequest {
    customerId: string;
    accountId: string;
}

export interface GetAccountOwnerRequest {
    customerId: string;
    accountId: string;
}

export interface GetAccountOwnerDetailsRequest {
    customerId: string;
    accountId: string;
    withInsights?: boolean;
}

export interface GetAvailableBalanceRequest {
    customerId: string;
    accountId: string;
}

export interface GetAvailableBalanceLiveRequest {
    customerId: string;
    accountId: string;
}

export interface GetLoanPaymentDetailsRequest {
    customerId: string;
    accountId: string;
}

/**
 * 
 */
export class PaymentsApi extends runtime.BaseAPI {

    /**
     * Return the real account number and routing number details for an ACH payment.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"loan\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Account ACH Details
     */
    async getAccountACHDetailsRaw(requestParameters: GetAccountACHDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ACHDetails>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getAccountACHDetails.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountACHDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v1/customers/{customerId}/accounts/{accountId}/details`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ACHDetailsFromJSON(jsonValue));
    }

    /**
     * Return the real account number and routing number details for an ACH payment.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"loan\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Account ACH Details
     */
    async getAccountACHDetails(requestParameters: GetAccountACHDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ACHDetails> {
        const response = await this.getAccountACHDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the names and addresses of the account owner from a financial institution.  Note: this is a premium service, billable per every successful API call.  This service retrieves account data from the institution. This usually returns quickly, but in some scenarios may take a few minutes to complete. In the event of a timeout condition, retry the call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Account Owner
     */
    async getAccountOwnerRaw(requestParameters: GetAccountOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountOwner>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getAccountOwner.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountOwner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v1/customers/{customerId}/accounts/{accountId}/owner`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountOwnerFromJSON(jsonValue));
    }

    /**
     * Retrieve the names and addresses of the account owner from a financial institution.  Note: this is a premium service, billable per every successful API call.  This service retrieves account data from the institution. This usually returns quickly, but in some scenarios may take a few minutes to complete. In the event of a timeout condition, retry the call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Account Owner
     */
    async getAccountOwner(requestParameters: GetAccountOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountOwner> {
        const response = await this.getAccountOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This service retrieves the account details for an account holder from an institution. The following data objects are available.  * Account holders  * Addresses  * Emails  * Phones  * Documentations  * Identity Insights   Note: The data returned varies from institution to institution as not all of them make the same data available. This is a premium service, billable per each successful API call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Account Owner Details
     */
    async getAccountOwnerDetailsRaw(requestParameters: GetAccountOwnerDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountOwnerHolders>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getAccountOwnerDetails.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountOwnerDetails.');
        }

        const queryParameters: any = {};

        if (requestParameters.withInsights !== undefined) {
            queryParameters['withInsights'] = requestParameters.withInsights;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v3/customers/{customerId}/accounts/{accountId}/owner`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountOwnerHoldersFromJSON(jsonValue));
    }

    /**
     * This service retrieves the account details for an account holder from an institution. The following data objects are available.  * Account holders  * Addresses  * Emails  * Phones  * Documentations  * Identity Insights   Note: The data returned varies from institution to institution as not all of them make the same data available. This is a premium service, billable per each successful API call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Account Owner Details
     */
    async getAccountOwnerDetails(requestParameters: GetAccountOwnerDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountOwnerHolders> {
        const response = await this.getAccountOwnerDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the latest cached available and cleared account balances for a customer. Since we update and store balances throughout the day, this is the most accurate balance information available when a connection to a financial institution is unavailable or when a faster response is needed. Only deposit account types are supported: Checking, Savings, Money Market, and CD.  Note: this is a premium service, billable per every successful API call. Enrollment is required.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Available Balance
     */
    async getAvailableBalanceRaw(requestParameters: GetAvailableBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailableBalance>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getAvailableBalance.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAvailableBalance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v1/customers/{customerId}/accounts/{accountId}/availableBalance`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailableBalanceFromJSON(jsonValue));
    }

    /**
     * Retrieve the latest cached available and cleared account balances for a customer. Since we update and store balances throughout the day, this is the most accurate balance information available when a connection to a financial institution is unavailable or when a faster response is needed. Only deposit account types are supported: Checking, Savings, Money Market, and CD.  Note: this is a premium service, billable per every successful API call. Enrollment is required.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Available Balance
     */
    async getAvailableBalance(requestParameters: GetAvailableBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailableBalance> {
        const response = await this.getAvailableBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the available and cleared account balances for a single account in real-time directly from a financial institution.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Available Balance - Live
     */
    async getAvailableBalanceLiveRaw(requestParameters: GetAvailableBalanceLiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailableBalance>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getAvailableBalanceLive.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAvailableBalanceLive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v1/customers/{customerId}/accounts/{accountId}/availableBalance/live`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailableBalanceFromJSON(jsonValue));
    }

    /**
     * Retrieve the available and cleared account balances for a single account in real-time directly from a financial institution.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Available Balance - Live
     */
    async getAvailableBalanceLive(requestParameters: GetAvailableBalanceLiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailableBalance> {
        const response = await this.getAvailableBalanceLiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the loan payment details of the customer for a loan-type account.  Note: this is a premium service, billable per every successful API call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Loan Payment Details
     */
    async getLoanPaymentDetailsRaw(requestParameters: GetLoanPaymentDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoanPaymentDetails>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getLoanPaymentDetails.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getLoanPaymentDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v2/customers/{customerId}/accounts/{accountId}/loanDetails`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoanPaymentDetailsFromJSON(jsonValue));
    }

    /**
     * Return the loan payment details of the customer for a loan-type account.  Note: this is a premium service, billable per every successful API call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Loan Payment Details
     */
    async getLoanPaymentDetails(requestParameters: GetLoanPaymentDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoanPaymentDetails> {
        const response = await this.getLoanPaymentDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
