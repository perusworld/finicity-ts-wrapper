/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppStatuses,
  Application,
  CustomerAccounts,
  ErrorMessage,
  RegisteredApplication,
} from '../models/index';
import {
    AppStatusesFromJSON,
    AppStatusesToJSON,
    ApplicationFromJSON,
    ApplicationToJSON,
    CustomerAccountsFromJSON,
    CustomerAccountsToJSON,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    RegisteredApplicationFromJSON,
    RegisteredApplicationToJSON,
} from '../models/index';

export interface GetAppRegistrationStatusRequest {
    preAppId?: string;
    applicationId?: string;
    status?: string;
    appName?: string;
    submittedDate?: number;
    modifiedDate?: number;
    page?: number;
    pageSize?: number;
}

export interface MigrateInstitutionLoginAccountsRequest {
    customerId: string;
    institutionLoginId: string;
}

export interface ModifyAppRegistrationRequest {
    preAppId: string;
    application: Application;
}

export interface RegisterAppRequest {
    application: Application;
}

export interface SetCustomerAppIDRequest {
    customerId: string;
    applicationId: string;
}

/**
 * 
 */
export class AppRegistrationApi extends runtime.BaseAPI {

    /**
     * Get the status of your application registration(s).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get App Registration Status
     */
    async getAppRegistrationStatusRaw(requestParameters: GetAppRegistrationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStatuses>> {
        const queryParameters: any = {};

        if (requestParameters.preAppId !== undefined) {
            queryParameters['preAppId'] = requestParameters.preAppId;
        }

        if (requestParameters.applicationId !== undefined) {
            queryParameters['applicationId'] = requestParameters.applicationId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.appName !== undefined) {
            queryParameters['appName'] = requestParameters.appName;
        }

        if (requestParameters.submittedDate !== undefined) {
            queryParameters['submittedDate'] = requestParameters.submittedDate;
        }

        if (requestParameters.modifiedDate !== undefined) {
            queryParameters['modifiedDate'] = requestParameters.modifiedDate;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v2/partners/applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStatusesFromJSON(jsonValue));
    }

    /**
     * Get the status of your application registration(s).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get App Registration Status
     */
    async getAppRegistrationStatus(requestParameters: GetAppRegistrationStatusRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStatuses> {
        const response = await this.getAppRegistrationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `institutionLoginId` parameter uses Finicity\'s internal FI mapping to move accounts from the current FI legacy connection to the new OAuth FI connection.  This API returns a list of accounts for the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Migrate Institution Login Accounts
     */
    async migrateInstitutionLoginAccountsRaw(requestParameters: MigrateInstitutionLoginAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccounts>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling migrateInstitutionLoginAccounts.');
        }

        if (requestParameters.institutionLoginId === null || requestParameters.institutionLoginId === undefined) {
            throw new runtime.RequiredError('institutionLoginId','Required parameter requestParameters.institutionLoginId was null or undefined when calling migrateInstitutionLoginAccounts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v2/customers/{customerId}/institutionLogins/{institutionLoginId}/migration`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"institutionLoginId"}}`, encodeURIComponent(String(requestParameters.institutionLoginId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAccountsFromJSON(jsonValue));
    }

    /**
     * The `institutionLoginId` parameter uses Finicity\'s internal FI mapping to move accounts from the current FI legacy connection to the new OAuth FI connection.  This API returns a list of accounts for the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Migrate Institution Login Accounts
     */
    async migrateInstitutionLoginAccounts(requestParameters: MigrateInstitutionLoginAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccounts> {
        const response = await this.migrateInstitutionLoginAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a registered application.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Modify App Registration
     */
    async modifyAppRegistrationRaw(requestParameters: ModifyAppRegistrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisteredApplication>> {
        if (requestParameters.preAppId === null || requestParameters.preAppId === undefined) {
            throw new runtime.RequiredError('preAppId','Required parameter requestParameters.preAppId was null or undefined when calling modifyAppRegistration.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling modifyAppRegistration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v1/partners/applications/{preAppId}`.replace(`{${"preAppId"}}`, encodeURIComponent(String(requestParameters.preAppId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationToJSON(requestParameters.application),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisteredApplicationFromJSON(jsonValue));
    }

    /**
     * Update a registered application.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Modify App Registration
     */
    async modifyAppRegistration(requestParameters: ModifyAppRegistrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisteredApplication> {
        const response = await this.modifyAppRegistrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new application to access financial institutions using OAuth connections.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Register App
     */
    async registerAppRaw(requestParameters: RegisterAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisteredApplication>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling registerApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v1/partners/applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationToJSON(requestParameters.application),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisteredApplicationFromJSON(jsonValue));
    }

    /**
     * Register a new application to access financial institutions using OAuth connections.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Register App
     */
    async registerApp(requestParameters: RegisterAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisteredApplication> {
        const response = await this.registerAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If you have multiple applications for a single client, and you want to register their applications to access financial institutions using OAuth connections, then use this API to assign applications to an existing customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Set Customer App ID
     */
    async setCustomerAppIDRaw(requestParameters: SetCustomerAppIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling setCustomerAppID.');
        }

        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling setCustomerAppID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v1/customers/{customerId}/applications/{applicationId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * If you have multiple applications for a single client, and you want to register their applications to access financial institutions using OAuth connections, then use this API to assign applications to an existing customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Set Customer App ID
     */
    async setCustomerAppID(requestParameters: SetCustomerAppIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setCustomerAppIDRaw(requestParameters, initOverrides);
    }

}
