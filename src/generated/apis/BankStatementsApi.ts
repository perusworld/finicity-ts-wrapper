/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorMessage,
  StatementReportAck,
  StatementReportConstraints,
} from '../models/index';
import {
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    StatementReportAckFromJSON,
    StatementReportAckToJSON,
    StatementReportConstraintsFromJSON,
    StatementReportConstraintsToJSON,
} from '../models/index';

export interface GenerateStatementReportRequest {
    customerId: string;
    statementReportConstraints: StatementReportConstraints;
    callbackUrl?: string;
}

export interface GetCustomerAccountStatementRequest {
    customerId: string;
    accountId: string;
    index?: number;
    type?: string;
}

/**
 * 
 */
export class BankStatementsApi extends runtime.BaseAPI {

    /**
     * Generate a Statement Report report for the given accounts under the given customer.  This is a premium service. A billable event will be created upon the successful generation of the Statement Report.   Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Generate Statement Report
     */
    async generateStatementReportRaw(requestParameters: GenerateStatementReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatementReportAck>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling generateStatementReport.');
        }

        if (requestParameters.statementReportConstraints === null || requestParameters.statementReportConstraints === undefined) {
            throw new runtime.RequiredError('statementReportConstraints','Required parameter requestParameters.statementReportConstraints was null or undefined when calling generateStatementReport.');
        }

        const queryParameters: any = {};

        if (requestParameters.callbackUrl !== undefined) {
            queryParameters['callbackUrl'] = requestParameters.callbackUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/decisioning/v2/customers/{customerId}/statement`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StatementReportConstraintsToJSON(requestParameters.statementReportConstraints),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatementReportAckFromJSON(jsonValue));
    }

    /**
     * Generate a Statement Report report for the given accounts under the given customer.  This is a premium service. A billable event will be created upon the successful generation of the Statement Report.   Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Generate Statement Report
     */
    async generateStatementReport(requestParameters: GenerateStatementReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatementReportAck> {
        const response = await this.generateStatementReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the customer\'s bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.   For certified financial institutions, statements are available for the following account types: * Checking * Savings * Money market * CDs * Investments * Mortgage * Credit cards * Loans * Line of credit * Student Loans  Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Customer Account Statement
     */
    async getCustomerAccountStatementRaw(requestParameters: GetCustomerAccountStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getCustomerAccountStatement.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getCustomerAccountStatement.');
        }

        const queryParameters: any = {};

        if (requestParameters.index !== undefined) {
            queryParameters['index'] = requestParameters.index;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
        }

        const response = await this.request({
            path: `/aggregation/v1/customers/{customerId}/accounts/{accountId}/statement`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Retrieve the customer\'s bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.   For certified financial institutions, statements are available for the following account types: * Checking * Savings * Money market * CDs * Investments * Mortgage * Credit cards * Loans * Line of credit * Student Loans  Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Customer Account Statement
     */
    async getCustomerAccountStatement(requestParameters: GetCustomerAccountStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getCustomerAccountStatementRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
