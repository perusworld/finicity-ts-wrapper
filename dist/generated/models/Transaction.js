"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionToJSON = exports.TransactionFromJSONTyped = exports.TransactionFromJSON = exports.instanceOfTransaction = void 0;
const runtime_1 = require("../runtime");
const Categorization_1 = require("./Categorization");
/**
 * Check if a given object implements the Transaction interface.
 */
function instanceOfTransaction(value) {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "accountId" in value;
    isInstance = isInstance && "customerId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "createdDate" in value;
    return isInstance;
}
exports.instanceOfTransaction = instanceOfTransaction;
function TransactionFromJSON(json) {
    return TransactionFromJSONTyped(json, false);
}
exports.TransactionFromJSON = TransactionFromJSON;
function TransactionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'amount': json['amount'],
        'accountId': json['accountId'],
        'customerId': json['customerId'],
        'status': json['status'],
        'description': json['description'],
        'memo': !(0, runtime_1.exists)(json, 'memo') ? undefined : json['memo'],
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : json['type'],
        'transactionDate': !(0, runtime_1.exists)(json, 'transactionDate') ? undefined : json['transactionDate'],
        'postedDate': !(0, runtime_1.exists)(json, 'postedDate') ? undefined : json['postedDate'],
        'createdDate': json['createdDate'],
        'firstEffectiveDate': !(0, runtime_1.exists)(json, 'firstEffectiveDate') ? undefined : json['firstEffectiveDate'],
        'effectiveDate': !(0, runtime_1.exists)(json, 'effectiveDate') ? undefined : json['effectiveDate'],
        'optionExpireDate': !(0, runtime_1.exists)(json, 'optionExpireDate') ? undefined : json['optionExpireDate'],
        'checkNum': !(0, runtime_1.exists)(json, 'checkNum') ? undefined : json['checkNum'],
        'escrowAmount': !(0, runtime_1.exists)(json, 'escrowAmount') ? undefined : json['escrowAmount'],
        'feeAmount': !(0, runtime_1.exists)(json, 'feeAmount') ? undefined : json['feeAmount'],
        'suspenseAmount': !(0, runtime_1.exists)(json, 'suspenseAmount') ? undefined : json['suspenseAmount'],
        'interestAmount': !(0, runtime_1.exists)(json, 'interestAmount') ? undefined : json['interestAmount'],
        'principalAmount': !(0, runtime_1.exists)(json, 'principalAmount') ? undefined : json['principalAmount'],
        'optionStrikePrice': !(0, runtime_1.exists)(json, 'optionStrikePrice') ? undefined : json['optionStrikePrice'],
        'unitQuantity': !(0, runtime_1.exists)(json, 'unitQuantity') ? undefined : json['unitQuantity'],
        'unitPrice': !(0, runtime_1.exists)(json, 'unitPrice') ? undefined : json['unitPrice'],
        'categorization': !(0, runtime_1.exists)(json, 'categorization') ? undefined : (0, Categorization_1.CategorizationFromJSON)(json['categorization']),
        'runningBalanceAmount': !(0, runtime_1.exists)(json, 'runningBalanceAmount') ? undefined : json['runningBalanceAmount'],
        'subaccountSecurityType': !(0, runtime_1.exists)(json, 'subaccountSecurityType') ? undefined : json['subaccountSecurityType'],
        'commissionAmount': !(0, runtime_1.exists)(json, 'commissionAmount') ? undefined : json['commissionAmount'],
        'ticker': !(0, runtime_1.exists)(json, 'ticker') ? undefined : json['ticker'],
        'investmentTransactionType': !(0, runtime_1.exists)(json, 'investmentTransactionType') ? undefined : json['investmentTransactionType'],
        'taxesAmount': !(0, runtime_1.exists)(json, 'taxesAmount') ? undefined : json['taxesAmount'],
        'currencySymbol': !(0, runtime_1.exists)(json, 'currencySymbol') ? undefined : json['currencySymbol'],
        'incomeType': !(0, runtime_1.exists)(json, 'incomeType') ? undefined : json['incomeType'],
        'splitDenominator': !(0, runtime_1.exists)(json, 'splitDenominator') ? undefined : json['splitDenominator'],
        'splitNumerator': !(0, runtime_1.exists)(json, 'splitNumerator') ? undefined : json['splitNumerator'],
        'sharesPerContract': !(0, runtime_1.exists)(json, 'sharesPerContract') ? undefined : json['sharesPerContract'],
        'subAccountFund': !(0, runtime_1.exists)(json, 'subAccountFund') ? undefined : json['subAccountFund'],
        'securityId': !(0, runtime_1.exists)(json, 'securityId') ? undefined : json['securityId'],
        'securityIdType': !(0, runtime_1.exists)(json, 'securityIdType') ? undefined : json['securityIdType'],
    };
}
exports.TransactionFromJSONTyped = TransactionFromJSONTyped;
function TransactionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'amount': value.amount,
        'accountId': value.accountId,
        'customerId': value.customerId,
        'status': value.status,
        'description': value.description,
        'memo': value.memo,
        'type': value.type,
        'transactionDate': value.transactionDate,
        'postedDate': value.postedDate,
        'createdDate': value.createdDate,
        'firstEffectiveDate': value.firstEffectiveDate,
        'effectiveDate': value.effectiveDate,
        'optionExpireDate': value.optionExpireDate,
        'checkNum': value.checkNum,
        'escrowAmount': value.escrowAmount,
        'feeAmount': value.feeAmount,
        'suspenseAmount': value.suspenseAmount,
        'interestAmount': value.interestAmount,
        'principalAmount': value.principalAmount,
        'optionStrikePrice': value.optionStrikePrice,
        'unitQuantity': value.unitQuantity,
        'unitPrice': value.unitPrice,
        'categorization': (0, Categorization_1.CategorizationToJSON)(value.categorization),
        'runningBalanceAmount': value.runningBalanceAmount,
        'subaccountSecurityType': value.subaccountSecurityType,
        'commissionAmount': value.commissionAmount,
        'ticker': value.ticker,
        'investmentTransactionType': value.investmentTransactionType,
        'taxesAmount': value.taxesAmount,
        'currencySymbol': value.currencySymbol,
        'incomeType': value.incomeType,
        'splitDenominator': value.splitDenominator,
        'splitNumerator': value.splitNumerator,
        'sharesPerContract': value.sharesPerContract,
        'subAccountFund': value.subAccountFund,
        'securityId': value.securityId,
        'securityIdType': value.securityIdType,
    };
}
exports.TransactionToJSON = TransactionToJSON;
//# sourceMappingURL=Transaction.js.map