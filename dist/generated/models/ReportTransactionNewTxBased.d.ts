/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ReportTransactionNewTxBased
 */
export interface ReportTransactionNewTxBased {
    /**
     * A transaction ID
     * @type {number}
     * @memberof ReportTransactionNewTxBased
     */
    id: number;
    /**
     * The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values.
     * @type {number}
     * @memberof ReportTransactionNewTxBased
     */
    amount?: number;
    /**
     * A timestamp showing when the transaction was posted or cleared by the institution
     * @type {number}
     * @memberof ReportTransactionNewTxBased
     */
    postedDate: number;
    /**
     * The description of the transaction, as provided by the institution (often known as `payee`). In the event that this field is left blank by the institution, Finicity will pass a value of "No description provided by institution". All other values are provided by the institution.
     * @type {string}
     * @memberof ReportTransactionNewTxBased
     */
    description: string;
    /**
     * The memo field of the transaction, as provided by the institution. The institution must provide either a description, a memo, or both. It is recommended to concatenate the two fields into a single value.
     * @type {string}
     * @memberof ReportTransactionNewTxBased
     */
    memo?: string;
    /**
     * A normalized payee, derived from the transaction's `description` and `memo` fields
     * @type {string}
     * @memberof ReportTransactionNewTxBased
     */
    normalizedPayee?: string;
    /**
     * The unique identifier given by the FI for each transaction
     * @type {string}
     * @memberof ReportTransactionNewTxBased
     */
    institutionTransactionId?: string;
    /**
     * One of the values from Categories (assigned based on the payee name)
     * @type {string}
     * @memberof ReportTransactionNewTxBased
     */
    category?: string;
    /**
     * One of the values from transaction types
     * @type {string}
     * @memberof ReportTransactionNewTxBased
     */
    type?: string;
    /**
     * The type of investment security (VOA only)
     * @type {string}
     * @memberof ReportTransactionNewTxBased
     */
    securityType?: string;
    /**
     * Investment symbol (VOA only)
     * @type {string}
     * @memberof ReportTransactionNewTxBased
     */
    symbol?: string;
    /**
     * A commission amount
     * @type {number}
     * @memberof ReportTransactionNewTxBased
     */
    commission?: number;
    /**
     * Keywords in the description and memo fields were used to translate investment transactions into these types
     *
     * * `cancel`
     *
     * * `purchaseToClose`
     *
     * * `purchasetoCover`
     *
     * * `contribution`
     *
     * * `optionExercise`
     *
     * * `optionExpiration`
     *
     * * `fee`
     *
     * * `soldToClose`
     *
     * * `soldToOpen`
     *
     * * `split`
     *
     * * `transfer`
     *
     * * `returnOfCapital`
     *
     * * `income`
     *
     * * `purchased`
     *
     * * `sold`
     *
     * * `dividendreInvest`
     *
     * * `dividend`
     *
     * * `reinvestOfIncome`
     *
     * * `interest`
     *
     * * `deposit`
     *
     * * `otherInfo`
     *
     * @type {string}
     * @memberof ReportTransactionNewTxBased
     */
    investmentTransactionType?: string;
}
/**
 * Check if a given object implements the ReportTransactionNewTxBased interface.
 */
export declare function instanceOfReportTransactionNewTxBased(value: object): boolean;
export declare function ReportTransactionNewTxBasedFromJSON(json: any): ReportTransactionNewTxBased;
export declare function ReportTransactionNewTxBasedFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportTransactionNewTxBased;
export declare function ReportTransactionNewTxBasedToJSON(value?: ReportTransactionNewTxBased | null): any;
