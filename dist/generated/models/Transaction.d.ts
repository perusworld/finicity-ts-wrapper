/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Categorization } from './Categorization';
/**
 *
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * A transaction ID
     * @type {number}
     * @memberof Transaction
     */
    id: number;
    /**
     * The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values.
     * @type {number}
     * @memberof Transaction
     */
    amount: number;
    /**
     * An account ID represented as a number
     * @type {number}
     * @memberof Transaction
     */
    accountId: number;
    /**
     * A customer ID represented as a number. See Add Customer API for how to create a customer ID.
     * @type {number}
     * @memberof Transaction
     */
    customerId: number;
    /**
     * One of "active", "pending", or "shadow" (see [Transaction Status](https://developer.mastercard.com/open-banking-us/documentation/products/manage/transaction-data/#transaction-status))
     * @type {string}
     * @memberof Transaction
     */
    status: string;
    /**
     * The description value is from the financial institution (FI), often known as the payee. The value "No description provided by institution" is returned when the FI doesn't provide one
     * @type {string}
     * @memberof Transaction
     */
    description: string;
    /**
     * The institution must provide either a description, a memo, or both. We recommended concatenating the two fields into a single value.
     * @type {string}
     * @memberof Transaction
     */
    memo?: string;
    /**
     * If provided by the institution, the following values may be returned in the field of a record:
     * * "atm"
     *
     * * "cash"
     *
     * * "check"
     *
     * * "credit"
     *
     * * "debit"
     *
     * * "deposit"
     *
     * * "directDebit"
     *
     * * "directDeposit"
     *
     * * "dividend"
     *
     * * "fee"
     *
     * * "interest"
     *
     * * "other"
     *
     * * "payment"
     *
     * * "pointOfSale"
     *
     * * "repeatPayment"
     *
     * * "serviceCharge"
     *
     * * "transfer"
     * @type {string}
     * @memberof Transaction
     */
    type?: string;
    /**
     * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it occurred. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof Transaction
     */
    transactionDate?: number;
    /**
     * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was posted or cleared by the institution. This value isn't required for student loan transaction data. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof Transaction
     */
    postedDate?: number;
    /**
     * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was added to our platform. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof Transaction
     */
    createdDate: number;
    /**
     * A date in Unix epoch time (in seconds). Represents the first timestamp of the transaction recorded in the `effectiveDate` field. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof Transaction
     */
    firstEffectiveDate?: number;
    /**
     * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it became effective on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof Transaction
     */
    effectiveDate?: number;
    /**
     * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction expiration date when it became expires on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     * @type {number}
     * @memberof Transaction
     */
    optionExpireDate?: number;
    /**
     * The check number of the transaction
     * @type {number}
     * @memberof Transaction
     */
    checkNum?: number;
    /**
     * The portion of the transaction allocated to escrow
     * @type {number}
     * @memberof Transaction
     */
    escrowAmount?: number;
    /**
     * The portion of the overall transaction amount applied to fees
     * @type {number}
     * @memberof Transaction
     */
    feeAmount?: number;
    /**
     * Temporarily hold funds if you overpay or underpay your monthly payment
     * @type {number}
     * @memberof Transaction
     */
    suspenseAmount?: number;
    /**
     * The portion of the transaction allocated to interest
     * @type {number}
     * @memberof Transaction
     */
    interestAmount?: number;
    /**
     * The portion of the transaction allocated to principal
     * @type {number}
     * @memberof Transaction
     */
    principalAmount?: number;
    /**
     * The strike price of the option contract
     * @type {number}
     * @memberof Transaction
     */
    optionStrikePrice?: number;
    /**
     * The number of units (individual shares) in the transaction
     * @type {number}
     * @memberof Transaction
     */
    unitQuantity?: number;
    /**
     * Share price for the investment unit: stocks, mutual funds, ETFs
     * @type {number}
     * @memberof Transaction
     */
    unitPrice?: number;
    /**
     *
     * @type {Categorization}
     * @memberof Transaction
     */
    categorization?: Categorization;
    /**
     * The ending balance after the transaction was posted
     * @type {number}
     * @memberof Transaction
     */
    runningBalanceAmount?: number;
    /**
     * The type of sub account the funds came from
     * @type {string}
     * @memberof Transaction
     */
    subaccountSecurityType?: string;
    /**
     * Transaction commission
     * @type {number}
     * @memberof Transaction
     */
    commissionAmount?: number;
    /**
     * Ticker symbol for the investment related to the transaction
     * @type {string}
     * @memberof Transaction
     */
    ticker?: string;
    /**
     * Keywords in the `description` and `memo` fields were used to translate investment transactions into these types.
     *
     * Possible values:
     * * "cancel"
     *
     * * "purchaseToClose"
     *
     * * "purchaseToCover"
     *
     * * "contribution"
     *
     * * "optionExercise"
     *
     * * "optionExpiration"
     *
     * * "fee"
     *
     * * "soldToClose"
     *
     * * "soldToOpen"
     *
     * * "split"
     *
     * * "transfer"
     *
     * * "returnOfCapital"
     *
     * * "income"
     *
     * * "purchased"
     *
     * * "sold"
     *
     * * "dividendreInvest"
     *
     * * "tax"
     *
     * * "dividend"
     *
     * * "reinvestOfIncome"
     *
     * * "interest"
     *
     * * "deposit"
     *
     * * "otherInfo"
     * @type {string}
     * @memberof Transaction
     */
    investmentTransactionType?: string;
    /**
     * Taxes applicable to the investment trade
     * @type {number}
     * @memberof Transaction
     */
    taxesAmount?: number;
    /**
     * If the foreign amount value is present then this is the currency code of that foreign amount
     * @type {string}
     * @memberof Transaction
     */
    currencySymbol?: string;
    /**
     * Capital gains applied in short, long, or miscellaneous terms for tax purposes
     * @type {string}
     * @memberof Transaction
     */
    incomeType?: string;
    /**
     * Denominator of the stock split for the transaction
     * @type {number}
     * @memberof Transaction
     */
    splitDenominator?: number;
    /**
     * Numerator of the stock split for the transaction
     * @type {number}
     * @memberof Transaction
     */
    splitNumerator?: number;
    /**
     * Shares per contract of the underlying stock option
     * @type {number}
     * @memberof Transaction
     */
    sharesPerContract?: number;
    /**
     * The sub account where the funds came from
     * @type {string}
     * @memberof Transaction
     */
    subAccountFund?: string;
    /**
     * The security ID of the transaction
     * @type {string}
     * @memberof Transaction
     */
    securityId?: string;
    /**
     * The security type. This field is related to the `securityId` field. Possible values:
     * * "CUSIP"
     *
     * * "ISIN"
     *
     * * "SEDOL"
     *
     * * "SICC"
     *
     * * "VALOR"
     *
     * * "WKN"
     * @type {string}
     * @memberof Transaction
     */
    securityIdType?: string;
}
/**
 * Check if a given object implements the Transaction interface.
 */
export declare function instanceOfTransaction(value: object): boolean;
export declare function TransactionFromJSON(json: any): Transaction;
export declare function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction;
export declare function TransactionToJSON(value?: Transaction | null): any;
