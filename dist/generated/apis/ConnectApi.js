"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class ConnectApi extends runtime.BaseAPI {
    /**
     * Generate a Connect 2.0 URL link to add within your own applications.  Optional Parameters: * `experience`: Configure different customer experiences per Connect session by changing the brand, color, logo, icon, the type of credit decisioning report to generate after the session ends, and more. * `language`: By default, the Connect application is in English. You don\'t need to pass  this parameter unless you want to translate Connect into one of our supported languages.     * Spanish (United States)   * French (Canada)   MVS Developers: You can pre-populate the consumer\'s SSN on the Find employment records page at the beginning of the MVS payroll app. Pass the SSN value for the consumer in the body of the request call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Generate Connect URL
     */
    generateConnectUrlRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectParameters === null || requestParameters.connectParameters === undefined) {
                throw new runtime.RequiredError('connectParameters', 'Required parameter requestParameters.connectParameters was null or undefined when calling generateConnectUrl.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/connect/v2/generate`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ConnectParametersToJSON)(requestParameters.connectParameters),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ConnectUrlFromJSON)(jsonValue));
        });
    }
    /**
     * Generate a Connect 2.0 URL link to add within your own applications.  Optional Parameters: * `experience`: Configure different customer experiences per Connect session by changing the brand, color, logo, icon, the type of credit decisioning report to generate after the session ends, and more. * `language`: By default, the Connect application is in English. You don\'t need to pass  this parameter unless you want to translate Connect into one of our supported languages.     * Spanish (United States)   * French (Canada)   MVS Developers: You can pre-populate the consumer\'s SSN on the Find employment records page at the beginning of the MVS payroll app. Pass the SSN value for the consumer in the body of the request call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Generate Connect URL
     */
    generateConnectUrl(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateConnectUrlRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use the Connect Fix API when the following conditions occur: * The connection to the user\'s financial institution is lost * The user\'s credentials were updated (for any number of reasons) * The user\'s MFA challenge has expired  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Generate Fix Connect URL
     */
    generateFixConnectUrlRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.fixConnectParameters === null || requestParameters.fixConnectParameters === undefined) {
                throw new runtime.RequiredError('fixConnectParameters', 'Required parameter requestParameters.fixConnectParameters was null or undefined when calling generateFixConnectUrl.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/connect/v2/generate/fix`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FixConnectParametersToJSON)(requestParameters.fixConnectParameters),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ConnectUrlFromJSON)(jsonValue));
        });
    }
    /**
     * Use the Connect Fix API when the following conditions occur: * The connection to the user\'s financial institution is lost * The user\'s credentials were updated (for any number of reasons) * The user\'s MFA challenge has expired  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Generate Fix Connect URL
     */
    generateFixConnectUrl(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateFixConnectUrlRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Same as Connect Full (`POST /connect/v2/generate`) but for joint borrowers.  MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Generate Connect URL - Joint Borrower
     */
    generateJointBorrowerConnectUrlRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectJointBorrowerParameters === null || requestParameters.connectJointBorrowerParameters === undefined) {
                throw new runtime.RequiredError('connectJointBorrowerParameters', 'Required parameter requestParameters.connectJointBorrowerParameters was null or undefined when calling generateJointBorrowerConnectUrl.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/connect/v2/generate/jointBorrower`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ConnectJointBorrowerParametersToJSON)(requestParameters.connectJointBorrowerParameters),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ConnectUrlFromJSON)(jsonValue));
        });
    }
    /**
     * Same as Connect Full (`POST /connect/v2/generate`) but for joint borrowers.  MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Generate Connect URL - Joint Borrower
     */
    generateJointBorrowerConnectUrl(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateJointBorrowerConnectUrlRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Connect Lite is a variation of Connect Full (`POST /connect/v2/generate`), which has a limited set of features. * Sign in, user\'s credentials, and Multi-Factor Authentication (MFA) * No user account management  The Connect Web SDK isn\'t a requirement when using Connect lite. However, if you want to use the SDK events, routes, and user events, then you must integrate with the Connect Web SDK.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Generate Lite Connect URL
     */
    generateLiteConnectUrlRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.liteConnectParameters === null || requestParameters.liteConnectParameters === undefined) {
                throw new runtime.RequiredError('liteConnectParameters', 'Required parameter requestParameters.liteConnectParameters was null or undefined when calling generateLiteConnectUrl.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/connect/v2/generate/lite`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LiteConnectParametersToJSON)(requestParameters.liteConnectParameters),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ConnectUrlFromJSON)(jsonValue));
        });
    }
    /**
     * Connect Lite is a variation of Connect Full (`POST /connect/v2/generate`), which has a limited set of features. * Sign in, user\'s credentials, and Multi-Factor Authentication (MFA) * No user account management  The Connect Web SDK isn\'t a requirement when using Connect lite. However, if you want to use the SDK events, routes, and user events, then you must integrate with the Connect Web SDK.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Generate Lite Connect URL
     */
    generateLiteConnectUrl(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateLiteConnectUrlRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Same as Connect Full (`POST /connect/v2/generate`) but send a Connect email to a consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Send Connect Email
     */
    sendConnectEmailRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectEmailParameters === null || requestParameters.connectEmailParameters === undefined) {
                throw new runtime.RequiredError('connectEmailParameters', 'Required parameter requestParameters.connectEmailParameters was null or undefined when calling sendConnectEmail.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/connect/v2/send/email`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ConnectEmailParametersToJSON)(requestParameters.connectEmailParameters),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ConnectEmailUrlFromJSON)(jsonValue));
        });
    }
    /**
     * Same as Connect Full (`POST /connect/v2/generate`) but send a Connect email to a consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Send Connect Email
     */
    sendConnectEmail(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendConnectEmailRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Same as Connect Joint Borrower (`POST /connect/v2/generate/jointBorrower`) but send a Connect email  to at least one of the joint borrower\'s email addresses.   When the consumer opens the email, MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Send Connect Email - Joint Borrower
     */
    sendJointBorrowerConnectEmailRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectJointBorrowerEmailParameters === null || requestParameters.connectJointBorrowerEmailParameters === undefined) {
                throw new runtime.RequiredError('connectJointBorrowerEmailParameters', 'Required parameter requestParameters.connectJointBorrowerEmailParameters was null or undefined when calling sendJointBorrowerConnectEmail.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/connect/v2/send/email/jointBorrower`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ConnectJointBorrowerEmailParametersToJSON)(requestParameters.connectJointBorrowerEmailParameters),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ConnectEmailUrlFromJSON)(jsonValue));
        });
    }
    /**
     * Same as Connect Joint Borrower (`POST /connect/v2/generate/jointBorrower`) but send a Connect email  to at least one of the joint borrower\'s email addresses.   When the consumer opens the email, MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Send Connect Email - Joint Borrower
     */
    sendJointBorrowerConnectEmail(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendJointBorrowerConnectEmailRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * The UI re-engages the consumer to enter two microdeposit amounts found in their account and validates them.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Account Validation Assistant User verification of microdeposits
     */
    verifyMicroEntryMicrodepositRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.microEntryVerifyRequestParameter === null || requestParameters.microEntryVerifyRequestParameter === undefined) {
                throw new runtime.RequiredError('microEntryVerifyRequestParameter', 'Required parameter requestParameters.microEntryVerifyRequestParameter was null or undefined when calling verifyMicroEntryMicrodeposit.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/connect/v2/generate/microentry/verify`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MicroEntryVerifyRequestParameterToJSON)(requestParameters.microEntryVerifyRequestParameter),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ConnectUrlFromJSON)(jsonValue));
        });
    }
    /**
     * The UI re-engages the consumer to enter two microdeposit amounts found in their account and validates them.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Account Validation Assistant User verification of microdeposits
     */
    verifyMicroEntryMicrodeposit(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.verifyMicroEntryMicrodepositRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ConnectApi = ConnectApi;
//# sourceMappingURL=ConnectApi.js.map