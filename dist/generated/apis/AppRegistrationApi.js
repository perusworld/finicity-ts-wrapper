"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppRegistrationApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class AppRegistrationApi extends runtime.BaseAPI {
    /**
     * Get the status of your application registration(s).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get App Registration Status
     */
    getAppRegistrationStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.preAppId !== undefined) {
                queryParameters['preAppId'] = requestParameters.preAppId;
            }
            if (requestParameters.applicationId !== undefined) {
                queryParameters['applicationId'] = requestParameters.applicationId;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.appName !== undefined) {
                queryParameters['appName'] = requestParameters.appName;
            }
            if (requestParameters.submittedDate !== undefined) {
                queryParameters['submittedDate'] = requestParameters.submittedDate;
            }
            if (requestParameters.modifiedDate !== undefined) {
                queryParameters['modifiedDate'] = requestParameters.modifiedDate;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['pageSize'] = requestParameters.pageSize;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/aggregation/v2/partners/applications`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AppStatusesFromJSON)(jsonValue));
        });
    }
    /**
     * Get the status of your application registration(s).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get App Registration Status
     */
    getAppRegistrationStatus() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.getAppRegistrationStatusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * The `institutionLoginId` parameter uses Finicity\'s internal FI mapping to move accounts from the current FI legacy connection to the new OAuth FI connection.  This API returns a list of accounts for the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Migrate Institution Login Accounts
     */
    migrateInstitutionLoginAccountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
                throw new runtime.RequiredError('customerId', 'Required parameter requestParameters.customerId was null or undefined when calling migrateInstitutionLoginAccounts.');
            }
            if (requestParameters.institutionLoginId === null || requestParameters.institutionLoginId === undefined) {
                throw new runtime.RequiredError('institutionLoginId', 'Required parameter requestParameters.institutionLoginId was null or undefined when calling migrateInstitutionLoginAccounts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/aggregation/v2/customers/{customerId}/institutionLogins/{institutionLoginId}/migration`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"institutionLoginId"}}`, encodeURIComponent(String(requestParameters.institutionLoginId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CustomerAccountsFromJSON)(jsonValue));
        });
    }
    /**
     * The `institutionLoginId` parameter uses Finicity\'s internal FI mapping to move accounts from the current FI legacy connection to the new OAuth FI connection.  This API returns a list of accounts for the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Migrate Institution Login Accounts
     */
    migrateInstitutionLoginAccounts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.migrateInstitutionLoginAccountsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a registered application.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Modify App Registration
     */
    modifyAppRegistrationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.preAppId === null || requestParameters.preAppId === undefined) {
                throw new runtime.RequiredError('preAppId', 'Required parameter requestParameters.preAppId was null or undefined when calling modifyAppRegistration.');
            }
            if (requestParameters.application === null || requestParameters.application === undefined) {
                throw new runtime.RequiredError('application', 'Required parameter requestParameters.application was null or undefined when calling modifyAppRegistration.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/aggregation/v1/partners/applications/{preAppId}`.replace(`{${"preAppId"}}`, encodeURIComponent(String(requestParameters.preAppId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ApplicationToJSON)(requestParameters.application),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RegisteredApplicationFromJSON)(jsonValue));
        });
    }
    /**
     * Update a registered application.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Modify App Registration
     */
    modifyAppRegistration(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.modifyAppRegistrationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Register a new application to access financial institutions using OAuth connections.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Register App
     */
    registerAppRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.application === null || requestParameters.application === undefined) {
                throw new runtime.RequiredError('application', 'Required parameter requestParameters.application was null or undefined when calling registerApp.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/aggregation/v1/partners/applications`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ApplicationToJSON)(requestParameters.application),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RegisteredApplicationFromJSON)(jsonValue));
        });
    }
    /**
     * Register a new application to access financial institutions using OAuth connections.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Register App
     */
    registerApp(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.registerAppRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * If you have multiple applications for a single client, and you want to register their applications to access financial institutions using OAuth connections, then use this API to assign applications to an existing customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Set Customer App ID
     */
    setCustomerAppIDRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
                throw new runtime.RequiredError('customerId', 'Required parameter requestParameters.customerId was null or undefined when calling setCustomerAppID.');
            }
            if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
                throw new runtime.RequiredError('applicationId', 'Required parameter requestParameters.applicationId was null or undefined when calling setCustomerAppID.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/aggregation/v1/customers/{customerId}/applications/{applicationId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * If you have multiple applications for a single client, and you want to register their applications to access financial institutions using OAuth connections, then use this API to assign applications to an existing customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Set Customer App ID
     */
    setCustomerAppID(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setCustomerAppIDRaw(requestParameters, initOverrides);
        });
    }
}
exports.AppRegistrationApi = AppRegistrationApi;
//# sourceMappingURL=AppRegistrationApi.js.map