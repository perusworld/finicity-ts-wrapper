"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BankStatementsApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class BankStatementsApi extends runtime.BaseAPI {
    /**
     * Generate a Statement Report report for the given accounts under the given customer.  This is a premium service. A billable event will be created upon the successful generation of the Statement Report.   Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Generate Statement Report
     */
    generateStatementReportRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
                throw new runtime.RequiredError('customerId', 'Required parameter requestParameters.customerId was null or undefined when calling generateStatementReport.');
            }
            if (requestParameters.statementReportConstraints === null || requestParameters.statementReportConstraints === undefined) {
                throw new runtime.RequiredError('statementReportConstraints', 'Required parameter requestParameters.statementReportConstraints was null or undefined when calling generateStatementReport.');
            }
            const queryParameters = {};
            if (requestParameters.callbackUrl !== undefined) {
                queryParameters['callbackUrl'] = requestParameters.callbackUrl;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/decisioning/v2/customers/{customerId}/statement`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.StatementReportConstraintsToJSON)(requestParameters.statementReportConstraints),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatementReportAckFromJSON)(jsonValue));
        });
    }
    /**
     * Generate a Statement Report report for the given accounts under the given customer.  This is a premium service. A billable event will be created upon the successful generation of the Statement Report.   Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Generate Statement Report
     */
    generateStatementReport(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateStatementReportRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the customer\'s bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.   For certified financial institutions, statements are available for the following account types: * Checking * Savings * Money market * CDs * Investments * Mortgage * Credit cards * Loans * Line of credit * Student Loans  Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Customer Account Statement
     */
    getCustomerAccountStatementRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
                throw new runtime.RequiredError('customerId', 'Required parameter requestParameters.customerId was null or undefined when calling getCustomerAccountStatement.');
            }
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getCustomerAccountStatement.');
            }
            const queryParameters = {};
            if (requestParameters.index !== undefined) {
                queryParameters['index'] = requestParameters.index;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/aggregation/v1/customers/{customerId}/accounts/{accountId}/statement`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.BlobApiResponse(response);
        });
    }
    /**
     * Retrieve the customer\'s bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.   For certified financial institutions, statements are available for the following account types: * Checking * Savings * Money market * CDs * Investments * Mortgage * Credit cards * Loans * Line of credit * Student Loans  Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * Get Customer Account Statement
     */
    getCustomerAccountStatement(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCustomerAccountStatementRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.BankStatementsApi = BankStatementsApi;
//# sourceMappingURL=BankStatementsApi.js.map