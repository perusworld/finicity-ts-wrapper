"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.13.9
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThirdPartyAccessApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class ThirdPartyAccessApi extends runtime.BaseAPI {
    /**
     * Generate access key for third party partners. A partner can provide access to third party partners with this access key.
     * Generate Third Party Access Key
     */
    generateThirdPartyAccessKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.thirdPartyAccessKeyData === null || requestParameters.thirdPartyAccessKeyData === undefined) {
                throw new runtime.RequiredError('thirdPartyAccessKeyData', 'Required parameter requestParameters.thirdPartyAccessKeyData was null or undefined when calling generateThirdPartyAccessKey.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/aggregation/v1/partners/accessKey`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ThirdPartyAccessKeyDataToJSON)(requestParameters.thirdPartyAccessKeyData),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ThirdPartyAccessKeyReceiptDataFromJSON)(jsonValue));
        });
    }
    /**
     * Generate access key for third party partners. A partner can provide access to third party partners with this access key.
     * Generate Third Party Access Key
     */
    generateThirdPartyAccessKey(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateThirdPartyAccessKeyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Revoke access of third party partners
     * Revoke Third Party Access
     */
    revokeThirdPartyAccessKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.consentReceiptId === null || requestParameters.consentReceiptId === undefined) {
                throw new runtime.RequiredError('consentReceiptId', 'Required parameter requestParameters.consentReceiptId was null or undefined when calling revokeThirdPartyAccessKey.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/aggregation/v1/partners/accessKey/{consentReceiptId}`.replace(`{${"consentReceiptId"}}`, encodeURIComponent(String(requestParameters.consentReceiptId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revoke access of third party partners
     * Revoke Third Party Access
     */
    revokeThirdPartyAccessKey(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.revokeThirdPartyAccessKeyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Update access for third party partners
     * Update Third Party Access
     */
    updateThirdPartyAccessKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.consentReceiptId === null || requestParameters.consentReceiptId === undefined) {
                throw new runtime.RequiredError('consentReceiptId', 'Required parameter requestParameters.consentReceiptId was null or undefined when calling updateThirdPartyAccessKey.');
            }
            if (requestParameters.thirdPartyAccessKeyData === null || requestParameters.thirdPartyAccessKeyData === undefined) {
                throw new runtime.RequiredError('thirdPartyAccessKeyData', 'Required parameter requestParameters.thirdPartyAccessKeyData was null or undefined when calling updateThirdPartyAccessKey.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Token"] = this.configuration.apiKey("Finicity-App-Token"); // FinicityAppToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Finicity-App-Key"] = this.configuration.apiKey("Finicity-App-Key"); // FinicityAppKey authentication
            }
            const response = yield this.request({
                path: `/aggregation/v1/partners/accessKey/{consentReceiptId}`.replace(`{${"consentReceiptId"}}`, encodeURIComponent(String(requestParameters.consentReceiptId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ThirdPartyAccessKeyDataToJSON)(requestParameters.thirdPartyAccessKeyData),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ThirdPartyAccessKeyReceiptDataFromJSON)(jsonValue));
        });
    }
    /**
     * Update access for third party partners
     * Update Third Party Access
     */
    updateThirdPartyAccessKey(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateThirdPartyAccessKeyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ThirdPartyAccessApi = ThirdPartyAccessApi;
//# sourceMappingURL=ThirdPartyAccessApi.js.map